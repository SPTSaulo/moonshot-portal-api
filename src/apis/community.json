{
  "openapi": "3.0.1",
  "info": {
    "title": "Community API",
    "description": "Moonshot Community API",
    "contact": {
      "email": "saulosantanab@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "https://dev.moonshot.ceo/api/community"
    }
  ],
  "tags": [
    {
      "name": "Version",
      "description": "Endpoint that return Community last version"
    },
    {
      "name": "OnlineEvent",
      "description": "Endpoints about OnlineEvent entity"
    },
    {
      "name": "FaceToFace",
      "description": "Endpoints about FaceToFace entity"
    },
    {
      "name": "Room",
      "description": "Endpoints about Room entity"
    },
    {
      "name": "DirectChat",
      "description": "Endpoints about DirectChat entity"
    },
    {
      "name": "FollowUpRoom",
      "description": "Endpoints about FollowUpRoom entity"
    },
    {
      "name": "PublicChannel",
      "description": "Endpoints about PublicChannel entity"
    },
    {
      "name": "WallPost",
      "description": "Endpoints about WallPost entity"
    },
    {
      "name": "Actor",
      "description": "Endpoints about Actor entity"
    },
    {
      "name": "Member",
      "description": "Endpoints about member entity"
    },
    {
      "name": "Project",
      "description": "Endpoints about Project entity"
    },
    {
      "name": "Setting",
      "description": "Endpoints about Setting entity"
    }
  ],
  "paths": {
    "/version": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "API version",
        "description": "Return the lastest version of the API\n",
        "operationId": "apiVersion",
        "responses": {
          "200": {
            "description": "API Version",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "1.0.25.r6-RC1"
                }
              }
            }
          },
          "500": {
            "description": "Cannot verify the certificate"
          }
        },
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#version_get"
        }
      }
    },
    "/online-events": {
      "get": {
        "tags": [
          "OnlineEvent"
        ],
        "summary": "Get all online events",
        "description": "Find all online events in the database\n",
        "operationId": "onlineEvents",
        "responses": {
          "200": {
            "description": "Get all online events successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineEvent"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#online-events_get"
        }
      }
    },
    "/online-event/{id}": {
      "get": {
        "tags": [
          "OnlineEvent"
        ],
        "summary": "Get an online event by id",
        "description": "Find an online event in the database by its identifier\n",
        "operationId": "onlineEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "online event id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get online event successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineEvent"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#online-event/:id_get"
        }
      },
      "delete": {
        "tags": [
          "OnlineEvent"
        ],
        "summary": "Remove an online event",
        "description": "Remove an online event from database\n",
        "operationId": "onlineEventDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "online event id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The user is not the online event owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineEventForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#online-event_delete"
        }
      }
    },
    "/online-event": {
      "post": {
        "tags": [
          "OnlineEvent"
        ],
        "summary": "Create an online event",
        "description": "Create and insert an online event in database\n",
        "operationId": "onlineEventCreate",
        "requestBody": {
          "description": "Object that contain all parameters to create an online event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnlineEventCreateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, title is empty, description is empty, timestamp is empty or you are not online event owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineEventEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "onlineEventCreate": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#online-event_post"
        }
      },
      "put": {
        "tags": [
          "OnlineEvent"
        ],
        "summary": "Update an online event",
        "description": "Find and update an online event in the database\n",
        "operationId": "onlineEventUpdate",
        "requestBody": {
          "description": "Object that contain all parameters to update an online event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnlineEventUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, online event id is empty, title is empty, description is empty or timestamp is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineEventEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#online-event_put"
        }
      }
    },
    "/online-event/admin": {
      "put": {
        "tags": [
          "OnlineEvent"
        ],
        "summary": "Update any online event",
        "description": "Find and update an online event in database\n",
        "operationId": "onlineEventUpdateAdmin",
        "requestBody": {
          "description": "Object that contain all parameters to update an online event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnlineEventUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, online event id is empty, title is empty, description is empty or timestamp is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineEventEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "onlineEventAnyUpdate": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#online-event/admin_put"
        }
      }
    },
    "/online-event/{id}/admin": {
      "delete": {
        "tags": [
          "OnlineEvent"
        ],
        "summary": "Delete any online event",
        "description": "Delete an online event from database\n",
        "operationId": "onlineEventDeleteAdmin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "online event id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "onlineEventAnyDelete": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#online-event/admin_delete"
        }
      }
    },
    "/online-event/subscription": {
      "put": {
        "tags": [
          "OnlineEvent"
        ],
        "summary": "Subscribe to an online event",
        "description": "Subscribe to an online event to become a participant\n",
        "operationId": "onlineEventSuscribe",
        "requestBody": {
          "description": "Object that contain all parameters to suscribe to an online event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnlineEventSubscriptionEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or online event id is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineEventEmptySuscriptionError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#online-event/subscription_put"
        }
      }
    },
    "/online-event/unsubscription": {
      "put": {
        "tags": [
          "OnlineEvent"
        ],
        "summary": "Unsubcribe from an online event",
        "description": "Unsubscribe from an online event to stop being a participant\n",
        "operationId": "onlineEventUnsubscribe",
        "requestBody": {
          "description": "Object that contain all parameters to unsubscribe from an online event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnlineEventUnsubscriptionEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelEventEmptySuscriptionError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#online-event/unsubscription_put"
        }
      }
    },
    "/face-to-face-events": {
      "get": {
        "tags": [
          "FaceToFace"
        ],
        "summary": "Get all face to face events",
        "description": "Find all face to face in the database\n",
        "operationId": "faceToFaceEvents",
        "responses": {
          "200": {
            "description": "Get all face to face events successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaceToFaceEvent"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#face-to-face-events_get"
        }
      }
    },
    "/face-to-face-event/{id}": {
      "get": {
        "tags": [
          "FaceToFace"
        ],
        "summary": "Get a face to face event by id",
        "description": "Find a face to face event in the database by its identifier\n",
        "operationId": "faceToFaceEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "face to face event id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get face to face event successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceToFaceEvent"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#face-to-face-event/:id_get"
        }
      },
      "delete": {
        "tags": [
          "FaceToFace"
        ],
        "summary": "Remove a face to face event",
        "description": "Remove a face to face event from database\n",
        "operationId": "faceToFaceEventDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "face to face event id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The user is not the face to face event owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceToFaceEventForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#face-to-face-event_delete"
        }
      }
    },
    "/face-to-face-event": {
      "post": {
        "tags": [
          "FaceToFace"
        ],
        "summary": "Create a face to face event",
        "description": "Create and insert a face to face event in database\n",
        "operationId": "faceToFaceEventCreate",
        "requestBody": {
          "description": "Object that contain all parameters to update an online event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceToFaceEventCreateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, title is empty or description is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceToFaceEventEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "faceToFaceEventCreate": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#face-to-face-event_post"
        }
      },
      "put": {
        "tags": [
          "FaceToFace"
        ],
        "summary": "Update a face to face event",
        "description": "Find and update a face to face event in the database\n",
        "operationId": "faceToFaceEventUpdate",
        "requestBody": {
          "description": "Object that contain all parameters to update a face to face event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceToFaceEventUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, face to face event id is empty, title is empty or description is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceToFaceEventEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#face-to-face-event_put"
        }
      }
    },
    "/face-to-face/admin": {
      "put": {
        "tags": [
          "FaceToFace"
        ],
        "summary": "Update any face to face event",
        "description": "Find and update an face to face event in database\n",
        "operationId": "faceToFaceEventUpdateAdmin",
        "requestBody": {
          "description": "Object that contain all parameters to update a face to face event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceToFaceEventUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, face to face event id is empty, title is empty, description is empty or timestamp is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceToFaceEventEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "faceToFaceEventAnyUpdate": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#face-to-face-event/admin_put"
        }
      }
    },
    "/face-to-face-event/{id}/admin": {
      "delete": {
        "tags": [
          "FaceToFace"
        ],
        "summary": "Delete any face to face event",
        "description": "Delete a face to face event from database\n",
        "operationId": "faceToFaceEventDeleteAdmin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "face to face event id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "faceToFaceEventAnyDelete": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#face-to-face-event/admin_delete"
        }
      }
    },
    "/face-to-face-event/subscription": {
      "put": {
        "tags": [
          "FaceToFace"
        ],
        "summary": "Subscribe to a face to face event",
        "description": "Subscribe to a face to face event to become a participant\n",
        "operationId": "faceToFaceEventSuscribe",
        "requestBody": {
          "description": "Object that contain all parameters to suscribe to a face to face event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceToFaceEventSubscriptionEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or online event id is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceToFaceEventEmptySuscriptionError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#face-to-face-event/subscription_put"
        }
      }
    },
    "/face-to-face-event/unsubscription": {
      "put": {
        "tags": [
          "FaceToFace"
        ],
        "summary": "Unsubcribe from a face to face event",
        "description": "Unsubscribe from a face to face event to stop being a participant\n",
        "operationId": "faceToFaceEventUnsubscribe",
        "requestBody": {
          "description": "Object that contain all parameters to unsubscribe from an face to face event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceToFaceEventUnsubscriptionEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelEventEmptySuscriptionError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#face-to-face-event/unsubscription_put"
        }
      }
    },
    "/room-documents/{room_id}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get all documents from the room",
        "description": "Find the room in database and return all the documents\n",
        "operationId": "roomDocuments",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get documents successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#room-documents/:room_id_get"
        }
      }
    },
    "/room-links/{room_id}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get all links from the room",
        "description": "Find the room in databse and return all the links\n",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get links successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#room-links/:room_id_get"
        }
      }
    },
    "/direct-chats": {
      "get": {
        "tags": [
          "DirectChat"
        ],
        "summary": "Get all direct chats where member is participant",
        "description": "Find all direct chats in the database where member is participant\n",
        "operationId": "directChats",
        "responses": {
          "200": {
            "description": "Get direct chats successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DirectChat"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "memberId": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#direct-chats_get"
        }
      }
    },
    "/direct-chats/all": {
      "get": {
        "tags": [
          "DirectChat"
        ],
        "summary": "Get all direct chats",
        "description": "Find all direct chats in database\n",
        "operationId": "directChatsAll",
        "responses": {
          "200": {
            "description": "Get direct chats successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DirectChat"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "directChatAnyList": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#direct-chats/all_get"
        }
      }
    },
    "/direct-chat/{id}": {
      "get": {
        "tags": [
          "DirectChat"
        ],
        "summary": "Get a direct chat by id",
        "description": "Find a direct chat in the database by its identifier\n",
        "operationId": "directChatById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "direct chat id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get direct chat successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectChat"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#direct-chat/:id_get"
        }
      },
      "delete": {
        "tags": [
          "DirectChat"
        ],
        "summary": "Remove a direct chat",
        "description": "Remove a direct chat from database\n",
        "operationId": "directChatDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "direct chat id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Direct chat was not found or user is not a participant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectChatInvalidIdError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#direct-chat_delete"
        }
      }
    },
    "/direct-chat": {
      "post": {
        "tags": [
          "DirectChat"
        ],
        "summary": "Create a direct chat",
        "description": "Create and insert a direct chat in database\n",
        "operationId": "directChatCreate",
        "requestBody": {
          "description": "Object that contain all parameters to create a direct chat",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectChatCreateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or direct chat already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectChatEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#direct-chat_post"
        }
      }
    },
    "/direct-chat/message": {
      "post": {
        "tags": [
          "DirectChat"
        ],
        "summary": "Send a message to the direct chat",
        "description": "Find and update a direct chat in database with the new message\n",
        "operationId": "directChatCreateMessage",
        "requestBody": {
          "description": "Object that contain all parameters to create a message",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageAddEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, direct chat id is empty, message content is empty, document link is empty, document category is empty, document filename is empty or cannot find direct chat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddMessageEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#direct-chat/message_post"
        }
      }
    },
    "/direct-chat/message/{id}": {
      "delete": {
        "tags": [
          "DirectChat"
        ],
        "summary": "Remove a direct chat message",
        "description": "Remove a direct chat message from database\n",
        "operationId": "directChatDeleteMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "direct chat message id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The user is not the message owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddMessageForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#direct-chat/message_delete"
        }
      }
    },
    "/direct-chat/messages/{room_id}": {
      "get": {
        "tags": [
          "DirectChat"
        ],
        "summary": "Get all messages from the direct chat",
        "description": "Find all message from the direct chat online event in the database\n",
        "operationId": "directChatMessages",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "direct chat id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get messages successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#direct-chat/messages/:room_id_get"
        }
      }
    },
    "/follow-up-rooms": {
      "get": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Get all follow up rooms where member is participant",
        "description": "Find all follow up room in the database where member is participant\n",
        "operationId": "followUpRooms",
        "responses": {
          "200": {
            "description": "Get all follow up rooms successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FollowUpRoom"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "memberId": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-rooms_get"
        }
      }
    },
    "/follow-up-rooms/all": {
      "get": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Get all follow up rooms",
        "description": "Find all follow up rooms in database\n",
        "operationId": "followUpRoomsAll",
        "responses": {
          "200": {
            "description": "Get follow up rooms successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FollowUpRoom"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "followUpRoomAnyList": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-rooms/all_get"
        }
      }
    },
    "/follow-up-room/{id}": {
      "get": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Get a follow up room by id",
        "description": "Find a follow up room in the database by its identifier\n",
        "operationId": "followUpRoomById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "follow up room id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get follow up room successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowUpRoom"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room/:id_get"
        }
      },
      "delete": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Remove a follow up room",
        "description": "Remove a follow up room from database\n",
        "operationId": "followUpRoomDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "follow up room id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room_delete"
        }
      }
    },
    "/follow-up-room": {
      "post": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Create a follow up room",
        "description": "Create and insert a follow up room in database\n",
        "operationId": "followUpRoomCreate",
        "requestBody": {
          "description": "Object that contain all parameters to create a follow up room",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowUpRoomCreateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, title is empty or description is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowUpRoomEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room_post"
        }
      },
      "put": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Update a follow up room",
        "description": "Find and update a follow up room in the database\n",
        "operationId": "followUpRoomUpdate",
        "requestBody": {
          "description": "Object that contain all parameters to update a follow up room",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowUpRoomUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, user is not the follow up room owner, title is empty or description is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowUpRoomEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room_put"
        }
      }
    },
    "/follow-up-room/add-member": {
      "put": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Add a participant in the follow up room",
        "description": "Find and update the partcipants of the follow up room\n",
        "operationId": "folloUpRoomAddMember",
        "requestBody": {
          "description": "Object that contain all parameters to add a member in a follow up room",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowUpRoomAddMemberEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or user is not the the follow up room owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowUpRoomAddMemberEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room/add-member_put"
        }
      }
    },
    "/follow-up-room/leave-member": {
      "put": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Remove a participant from the follow up room",
        "description": "Find and update the partcipants of the follow up room\n",
        "operationId": "folloUpRoomRemoveMember",
        "requestBody": {
          "description": "Object that contain all parameters to remove a member in a follow up room",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowUpRoomRemoveMemberEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or new owner id is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowUpRoomRemoveMemberEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room/leave-member_put"
        }
      }
    },
    "/follow-up-room/open": {
      "put": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Open a follow up room",
        "description": "Find and update the follow up room state to OPEN\n",
        "operationId": "followUpRoomOpen",
        "requestBody": {
          "description": "Object that contain all parameters to open a follow up room",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowUpRoomOpenEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or user is not the follow up room owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowUpRoomOpenEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room/open_put"
        }
      }
    },
    "/follow-up-room/close": {
      "put": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Close a follow up room",
        "description": "Find and update the follow up room state to CLOSE\n",
        "operationId": "followUpRoomClose",
        "requestBody": {
          "description": "Object that contain all parameters to close a follow up room",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowUpRoomCloseEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or user is not the follow up room owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FollowUpRoomCloseEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room/close_put"
        }
      }
    },
    "/follow-up-room/message": {
      "post": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Send a message to the follow up room",
        "description": "Find and update a follow up room in database with the new message\n",
        "operationId": "followUpRoomCreateMessage",
        "requestBody": {
          "description": "Object that contain all parameters to create a message",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageAddEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, follow up room id is empty, message content is empty, document link is empty, document category is empty, document filename is empty or user is not a participant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddMessageEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room/message_post"
        }
      }
    },
    "/follow-up-room/message/{id}": {
      "delete": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Remove a follow up room message",
        "description": "Remove a follow up room message from database\n",
        "operationId": "followUpRoomDeleteMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "online event id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The user is not the message owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddMessageForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room/message_delete"
        }
      }
    },
    "/follow-up-room/message/{id}/admin": {
      "delete": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Delete any follow up room message",
        "description": "Delete a follow up room message from database\n",
        "operationId": "followUpRoomDeleteMessageAdmin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "online event id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room/message/admin_delete"
        }
      }
    },
    "/follow-up-room/messages/{room_id}": {
      "get": {
        "tags": [
          "FollowUpRoom"
        ],
        "summary": "Get all messages from the follow up room",
        "description": "Find the room in database and return all the messages\n",
        "operationId": "followUpRoomMessages",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get messages successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#follow-up-room/messages/:room_id_get"
        }
      }
    },
    "/public-channels": {
      "get": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Get all public channels",
        "description": "Find all public channels in the database\n",
        "operationId": "publicChannels",
        "responses": {
          "200": {
            "description": "Get public channels successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicChannel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channels_get"
        }
      }
    },
    "/public-channel/{id}": {
      "get": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Get a public channel by id",
        "description": "Find a public channel in the database by its identifier\n",
        "operationId": "publicChannelById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "public channel room id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get public channel room successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannel"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel/:id_get"
        }
      },
      "delete": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Remove a public channel",
        "description": "Remove a public channel from database\n",
        "operationId": "publicChannelDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "online event id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The user is not the public channer owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel_delete"
        }
      }
    },
    "/public-channel": {
      "post": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Create a public channel",
        "description": "Create and insert a public channel in database\n",
        "operationId": "publicChannelCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicChannelCreateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, title is empty or description is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "publicChannelCreate": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel_post"
        }
      },
      "put": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Update a public channel",
        "description": "Find and update a public channel in the database\n",
        "operationId": "publicChannelUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicChannelUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, title is empty, description is empty, public channel id is empty or user is not public channel owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel_put"
        }
      }
    },
    "/public-channel/admin": {
      "put": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Update any public channel",
        "description": "Find and update a public channel in database\n",
        "operationId": "publicChannelUpdateAdmin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicChannelUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, title is empty or description is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "publicChannelAnyUpdate": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel/admin_put"
        }
      }
    },
    "/public-channel/{id}/admin": {
      "delete": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Remove any public channel",
        "description": "Remove a public channel from database\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "public channel id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "publicChannelAnyDelete": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel/admin_delete"
        }
      }
    },
    "/public-channel/message/{id}/admin": {
      "delete": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Remove any public channel message",
        "description": "Remove a public channel message from database\n",
        "operationId": "publicChannelDeleteAdmin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "public channel id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The user is not the owner of the public channel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel/admin_delete"
        }
      }
    },
    "/public-channel/subscribe": {
      "put": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Subscribe to a public channel",
        "description": "Subscribe to a public channel to become a participant\n",
        "operationId": "publicChannelSubscribe",
        "requestBody": {
          "description": "Object that contain all parameters to suscribe to a public channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicChannelSubscribeEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelEventEmptySuscriptionError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel/subscribe_put"
        }
      }
    },
    "/public-channel/unsubscribe": {
      "put": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Unsubcribe to a public channel",
        "description": "Unsubscribe from a public channel to stop being a participant\n",
        "operationId": "publicChannelUnsubscribe",
        "requestBody": {
          "description": "Object that contain all parameters to unsubscribe to a public channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicChannelUnsubscribeEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or new owner member id is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelEventEmptyUnsuscriptionError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel/unsubscribe_put"
        }
      }
    },
    "/public-channel/message": {
      "post": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Send a message to the public channel",
        "description": "Find and update a public channel in database with the new message\n",
        "operationId": "publicChannelCreateMessage",
        "requestBody": {
          "description": "Object that contain all parameters to create a message",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageAddEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, public channel id is empty, message content is empty, document link is empty, document category is empty, document filename is empty or cannot find direct chat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddMessageEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel/message_post"
        }
      }
    },
    "/public-channel/message/{id}": {
      "delete": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Remove a public channel message",
        "description": "Remove a public channel message from database\n",
        "operationId": "publicChannelDeleteMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "public channel id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel/message_delete"
        }
      }
    },
    "/public-channel/messages/{room_id}": {
      "get": {
        "tags": [
          "PublicChannel"
        ],
        "summary": "Get all messages from the public channel",
        "description": "Find the public channel in database and return all the messages\n",
        "operationId": "publicChannelMessages",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get messages successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#public-channel/messages/:room_id_get"
        }
      }
    },
    "/wall-post": {
      "post": {
        "tags": [
          "WallPost"
        ],
        "summary": "Create a wall post",
        "description": "Create and insert a wall post in database\n",
        "operationId": "wallPostCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WallPostCreateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or wall post content is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "wallPostCreate": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post_post"
        }
      },
      "put": {
        "tags": [
          "WallPost"
        ],
        "summary": "Update a wall post",
        "description": "Find and update a wall post in the database\n",
        "operationId": "wallPostUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WallPostUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, wall post id is empty, wall post content is empty or user is not the wall post owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post_put"
        }
      }
    },
    "/wall-post/admin": {
      "put": {
        "tags": [
          "WallPost"
        ],
        "summary": "Update any wall post",
        "description": "Find and update any wall post\n",
        "operationId": "wallPostUpdateAdmin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WallPostUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, wall post id is empty or wall post content is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "wallPostAnyUpdate": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post/admin_put"
        }
      }
    },
    "/wall-post/{id}/admin": {
      "delete": {
        "tags": [
          "WallPost"
        ],
        "summary": "Remove any wall post",
        "description": "Remove any wall post from database\n",
        "operationId": "wallPostDeleteAdmin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "public channel id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "wallPostAnyDelete": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post/admin_delete"
        }
      }
    },
    "/wall-post/like": {
      "put": {
        "tags": [
          "WallPost"
        ],
        "summary": "Give like to a wall post",
        "description": "Find and update a wall post with the new like\n",
        "operationId": "wallPostLike",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WallPostLikeEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post/like_put"
        }
      }
    },
    "/wall-post/unlike": {
      "put": {
        "tags": [
          "WallPost"
        ],
        "summary": "Delete like from a wall post",
        "description": "Find and update a wall post without the new like\n",
        "operationId": "wallPostUnlike",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WallPostUnlikeEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post/unlike_put"
        }
      }
    },
    "/wall-post/comment": {
      "post": {
        "tags": [
          "WallPost"
        ],
        "summary": "Comment a wall post",
        "description": "Find and update a wall post with the new comment\n",
        "operationId": "wallPostComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WallPostCommentAddEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post/comment_post"
        }
      }
    },
    "/wall-post/comment/like": {
      "put": {
        "tags": [
          "WallPost"
        ],
        "summary": "Give like to a wall post comment",
        "description": "Find and update a wall post with the new comment like\n",
        "operationId": "wallPostCommentLike",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WallPostCommentLikeEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post/comment/like_put"
        }
      }
    },
    "/wall-post/comment/unlike": {
      "put": {
        "tags": [
          "WallPost"
        ],
        "summary": "Remove like from a wall post comment",
        "description": "Find and update a wall post without the comment like\n",
        "operationId": "wallPostCommentUnlike",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WallPostCommentUnlikeEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post/comment/unlike_put"
        }
      }
    },
    "/wall-post/{id}": {
      "get": {
        "tags": [
          "WallPost"
        ],
        "summary": "Get a wall post by id",
        "description": "Find a wall post in the database by its identifier\n",
        "operationId": "wallPostById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "wall post id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get wall post successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPost"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post/:id_get"
        }
      },
      "delete": {
        "tags": [
          "WallPost"
        ],
        "summary": "Remove a wall post",
        "description": "Remove a wall post from database\n",
        "operationId": "wallPostDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "wall post id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The user is not the wall post owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-post_delete"
        }
      }
    },
    "/wall-posts": {
      "get": {
        "tags": [
          "WallPost"
        ],
        "summary": "Get all wall posts",
        "description": "Find all wall posts in the database\n",
        "operationId": "wallPosts",
        "parameters": [
          {
            "name": "lastId",
            "in": "query",
            "description": "Last wall post id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get wall posts successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WallPost"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid lastId param or invalid limit param",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WallPostInvalidIdError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#wall-posts_get"
        }
      }
    },
    "/actors": {
      "get": {
        "tags": [
          "Actor"
        ],
        "summary": "Get all actors",
        "description": "Find all actors in the database\n",
        "operationId": "actors",
        "responses": {
          "200": {
            "description": "Get all actors successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Actor"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actors_get"
        }
      }
    },
    "/actors/by-name-and-state": {
      "get": {
        "tags": [
          "Actor"
        ],
        "summary": "Get actors by name and state",
        "description": "Find actors in the database by name and state\n",
        "operationId": "actorsByNameAndState",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "actor name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "actor state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all actors successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Actor"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "actorManagement": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actors/by-name-and-state_get"
        }
      }
    },
    "/actors/by-type": {
      "get": {
        "tags": [
          "Actor"
        ],
        "summary": "Get actors by type",
        "description": "Find actors in the database by type\n",
        "operationId": "actorsByType",
        "parameters": [
          {
            "name": "types",
            "in": "query",
            "description": "array of actor types",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all actors successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Actor"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actors/by-type_get"
        }
      }
    },
    "/actors/by-state": {
      "get": {
        "tags": [
          "Actor"
        ],
        "summary": "Get actors by state",
        "description": "Find actors in the database by state\n",
        "operationId": "actorsByState",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "actor state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all actors successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Actor"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actors/by-state_get"
        }
      }
    },
    "/actors/by-member": {
      "get": {
        "tags": [
          "Actor"
        ],
        "summary": "Get actors by member",
        "description": "Find actors in the database by member\n",
        "operationId": "actorsByMember",
        "parameters": [
          {
            "name": "ownerMemberId",
            "in": "query",
            "description": "actor member owner id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all actors successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Actor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid owner member id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberInvalidIdError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actors/by-member_get"
        }
      }
    },
    "/actor/{id}": {
      "get": {
        "tags": [
          "Actor"
        ],
        "summary": "Get an actor",
        "description": "Find an actor in the database by its identifier\n",
        "operationId": "actor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "actor id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an actor successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Actor"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actor/:id_get"
        }
      },
      "delete": {
        "tags": [
          "Actor"
        ],
        "summary": "Remove an actor",
        "description": "Remove an actor from database\n",
        "operationId": "actorDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "actor id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or actor id is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActorEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actor_delete"
        }
      }
    },
    "/actor": {
      "post": {
        "tags": [
          "Actor"
        ],
        "summary": "Create an actor",
        "description": "Create and insert an actor in database\n",
        "operationId": "actorCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActorCreateEvent"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, ownerMember is empty, invalid owner member, invalid password, invalid actor or ecosystem does not accept this type of actor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActorEmptyBodyError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actor_post"
        }
      },
      "put": {
        "tags": [
          "Actor"
        ],
        "summary": "Update an actor",
        "description": "Find and update an actor in the database\n",
        "operationId": "actorUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, invalid actor id or a required parameter is null",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActorEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actor_put"
        }
      }
    },
    "/actor/accept": {
      "put": {
        "tags": [
          "Actor"
        ],
        "summary": "Change actor status to accept",
        "description": "Find and update the actor with the new status\n",
        "operationId": "actorAccept",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorAcceptEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or actor is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActorEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "actorManagement": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actor/accept_put"
        }
      }
    },
    "/actor/reject": {
      "put": {
        "tags": [
          "Actor"
        ],
        "summary": "Change actor status to reject",
        "description": "Find and update the actor with the new status\n",
        "operationId": "actorReject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorRejectEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or actor is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActorEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the necessary permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "actorManagement": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actor/reject_put"
        }
      }
    },
    "/actors/import/csv": {
      "post": {
        "tags": [
          "Actor"
        ],
        "summary": "Import actors from CSV file",
        "description": "Read a CSV file and insert all the actors in the database\n",
        "operationId": "actorsCsv",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CsvFormat"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or actor is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActorEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#actors/import/csv_post"
        }
      }
    },
    "/fcmToken": {
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Assign a fcm token",
        "description": "update a member by assigning it a fcm token\n",
        "operationId": "fcmToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberSetFcmTokenEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add session cookie and return member successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMember"
                }
              }
            }
          },
          "400": {
            "description": "Body is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#fcmToken_put"
        }
      }
    },
    "/member/logged-in": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get the member with the session open",
        "description": "Find the member with the session open in database and insert the cookie member id\n",
        "operationId": "loggedInMember",
        "responses": {
          "200": {
            "description": "Add session cookie and return member successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoggedMember"
                }
              }
            }
          },
          "400": {
            "description": "Member state is reject or pending",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberInvalidStateError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#member/logged-in_get"
        }
      }
    },
    "/members": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get members by ids",
        "description": "Find the members in database by their identifiers\n",
        "operationId": "members",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "array of member ids",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get members successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateMember"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#members_get"
        }
      }
    },
    "/member/{id}": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get a member by id",
        "description": "Find a member in the database by its identifier\n",
        "operationId": "member",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "member id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a member successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMember"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#member/:id_get"
        }
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Remove a member",
        "description": "Remove a member from database\n",
        "operationId": "memberDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "member id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#member_delete"
        }
      }
    },
    "/member/{id}/marker": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get a member marker by id",
        "description": "Find a member marker in the database by its identifier\n",
        "operationId": "memberMarker",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "member id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "marker color",
            "schema": {
              "type": "string",
              "example": "red"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a member marker successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte",
                    "example": 10011110
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          },
          {
            "userEmail": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#member/:id/marker_get"
        }
      }
    },
    "/member": {
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update a member",
        "description": "Find and update a member in the database\n",
        "operationId": "memberUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, member id is empty, a required param is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#member_put"
        }
      }
    },
    "/education": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Create an education",
        "description": "Find and update a member with the new education\n",
        "operationId": "memberEducationCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberEducationCreateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or a required param is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberEducationEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#education_post"
        }
      },
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update an education",
        "description": "Find and update a member with the updated education\n",
        "operationId": "memberEducationUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberEducationUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, member education id is empty or a required param is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberEducationEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#education_put"
        }
      }
    },
    "/education/{id}": {
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Remove an education",
        "description": "Find and update a member without the education\n",
        "operationId": "memberEducationDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "education id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#education_delete"
        }
      }
    },
    "/experience": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Create an experience",
        "description": "Find and update a member with the new experience\n",
        "operationId": "memberExperienceCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberExperienceCreateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or a required param is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberExperienceEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#experience_post"
        }
      },
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update an experience",
        "description": "Find and update a member with the updated experience\n",
        "operationId": "memberExperienceUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberExperienceUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, experience id is empty, a required param is empty or experience not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberExperienceEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#experience_put"
        }
      }
    },
    "/experience/{id}": {
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Remove an experience",
        "description": "Find and update a member without the experience\n",
        "operationId": "memberExperienceDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "experience id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, experience id is empty, a required param is empty or experience not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberExperienceEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#experience_delete"
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get projects by actor id",
        "description": "Find projects in the database by actor id\n",
        "operationId": "projects",
        "parameters": [
          {
            "name": "actorId",
            "in": "query",
            "description": "actor id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get projects successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#projects_get"
        }
      }
    },
    "/project/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get project by id",
        "description": "Find a project in the database by id\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "project id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongo-id",
              "example": "61445159784bca6ef764c6df"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get project successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#project/:id_get"
        }
      }
    },
    "/project": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a project",
        "description": "Create and insert a project in database\n",
        "operationId": "projectCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or a required param is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#project_post"
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update a project",
        "description": "Find and update a project in database\n",
        "operationId": "projectUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdateEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty, project id is empty or a required param is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#project_put"
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Remove a project",
        "description": "Remove a project in database\n",
        "operationId": "projectDelet",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Body is empty or project id is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEmptyBodyError"
                }
              }
            }
          },
          "401": {
            "description": "You must login before call this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAccessUnauthorizedError"
                }
              }
            }
          }
        },
        "security": [
          {
            "idToken": []
          }
        ],
        "externalDocs": {
          "description": "Code Example",
          "url": "http://localhost:4200/code-examples/community#project_delete"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateMember": {
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "PENDING",
              "REJECTED"
            ]
          },
          "name": {
            "type": "string",
            "example": "Carlos"
          },
          "lastname": {
            "type": "string",
            "example": "Guarin"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "pruebaemail@gmail.com"
          },
          "about": {
            "type": "string",
            "example": "Developer"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "https://www.instagram.com/user1, https://www.twitter.com/user1, https://www.linkedln.com/user1"
            }
          },
          "experiences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Experience"
            }
          },
          "educations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Education"
            }
          }
        }
      },
      "UpdateMember": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "61445159784bca6ef764c6df"
          },
          "state": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "PENDING",
              "REJECTED"
            ]
          },
          "name": {
            "type": "string",
            "example": "Carlos"
          },
          "lastname": {
            "type": "string",
            "example": "Guarin"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "pruebaemail@gmail.com"
          },
          "about": {
            "type": "string",
            "example": "Developer"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "https://www.instagram.com/user1, https://www.twitter.com/user1, https://www.linkedln.com/user1"
            }
          },
          "experiences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Experience"
            }
          },
          "educations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Education"
            }
          }
        }
      },
      "LoggedMember": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "61445159784bca6ef764c6df"
          },
          "state": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "PENDING",
              "REJECTED"
            ]
          },
          "name": {
            "type": "string",
            "example": "Carlos"
          },
          "lastname": {
            "type": "string",
            "example": "Guarin"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "pruebaemail@gmail.com"
          },
          "about": {
            "type": "string",
            "example": "Developer"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "https://www.instagram.com/user1, https://www.twitter.com/user1, https://www.linkedln.com/user1"
            }
          },
          "experiences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Experience"
            }
          },
          "educations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Education"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Image": {
        "required": [
          "original",
          "thumbnail",
          "crop"
        ],
        "type": "object",
        "properties": {
          "original": {
            "type": "string",
            "example": "https://moonshot-innovation.s3.eu-central-1.amazonaws.com/60aca5fa0565c3210a322662/image/f306ce3b-4db9-4529-9bde-fdb133bbef1f.png"
          },
          "thumbnail": {
            "type": "string",
            "example": "https://moonshot-innovation.s3.eu-central-1.amazonaws.com/60aca5fa0565c3210a322662/image/f306ce3b-4db9-4529-9bde-fdb133bbef1f.png"
          },
          "crop": {
            "$ref": "#/components/schemas/Crop"
          }
        }
      },
      "Crop": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "example": 100
          },
          "y": {
            "type": "number",
            "example": 20
          },
          "width": {
            "type": "number",
            "example": 1750
          },
          "height": {
            "type": "number",
            "example": 500
          }
        }
      },
      "Education": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "61445159784bca6ef764c6df"
          },
          "school": {
            "type": "string",
            "example": "Universidad de Navarra"
          },
          "degree": {
            "type": "string",
            "example": "Licenciado en Periodismo"
          },
          "fieldOfStudy": {
            "type": "string",
            "example": "Periodismo radiofónico"
          },
          "startDate": {
            "type": "string",
            "format": "localdate",
            "example": "2020-07-30T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "format": "localdate",
            "example": "2021-05-14T00:00:00.000Z"
          },
          "grade": {
            "type": "number",
            "example": 8.5
          },
          "activitiesAndSocieties": {
            "type": "string",
            "example": "Equipo de rugby universitario"
          },
          "description": {
            "type": "string",
            "example": "Cuatro años en la universidad de Navarra desarrollandome como periodista, incrementando mis capacidades comunicativas"
          }
        }
      },
      "Experience": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "61445159784bca6ef764c6df"
          },
          "title": {
            "type": "string",
            "example": "University practices"
          },
          "company": {
            "type": "string",
            "example": "Moonshot Innovation"
          },
          "location": {
            "$ref": "#/components/schemas/Address"
          },
          "startDate": {
            "type": "string",
            "format": "localdate",
            "example": "2020-07-30T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "format": "localdate",
            "example": "2021-05-14T00:00:00.000Z"
          },
          "description": {
            "type": "string",
            "example": "I did front end development work"
          }
        }
      },
      "Address": {
        "properties": {
          "lat": {
            "type": "number",
            "example": 20.3
          },
          "lng": {
            "type": "number",
            "example": 14.2
          },
          "formatted": {
            "type": "string",
            "example": "3761 Coleman Plains Suite 604 - Las Cruces"
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressComponent"
            }
          }
        }
      },
      "AddressComponent": {
        "properties": {
          "name": {
            "type": "string",
            "example": "California"
          },
          "shortname": {
            "type": "string",
            "example": "CA"
          },
          "type": {
            "type": "string",
            "enum": [
              "ADMINISTRATIVE_AREA_LEVEL_1",
              "ADMINISTRATIVE_AREA_LEVEL_2",
              "ADMINISTRATIVE_AREA_LEVEL_3",
              "ADMINISTRATIVE_AREA_LEVEL_4",
              "ADMINISTRATIVE_AREA_LEVEL_5",
              "ARCHIPELAGO",
              "COLLOQUIAL_AREA",
              "CONTINENT",
              "COUNTRY",
              "ESTABLISHMENT",
              "FINANCE",
              "FLOOR",
              "FOOD",
              "GENERAL_CONTRACTOR",
              "GEOCODE",
              "HEALTH",
              "INTERSECTION",
              "LANDMARK",
              "LOCALITY",
              "NATURAL_FEATURE",
              "NEIGHBORHOOD",
              "PLACE_OF_WORSHIP",
              "PLUS_CODE",
              "POINT_OF_INTEREST",
              "POLITICAL",
              "POST_BOX",
              "POSTAL_CODE",
              "POSTAL_CODE_PREFIX",
              "POSTAL_CODE_SUFFIX",
              "POSTAL_TOWN",
              "PREMISE",
              "ROOM",
              "ROUTE",
              "STREET_ADDRESS",
              "STREET_NUMBER",
              "SUBLOCALITY",
              "SUBLOCALITY_LEVEL_1",
              "SUBLOCALITY_LEVEL_2",
              "SUBLOCALITY_LEVEL_3",
              "SUBLOCALITY_LEVEL_4",
              "SUBLOCALITY_LEVEL_5",
              "SUBPREMISE",
              "TOWN_SQUARE"
            ]
          }
        }
      },
      "Document": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "link": {
            "type": "string",
            "example": "https://docs.google.com/viewerng/vi54473784a6a2.xlsx"
          },
          "category": {
            "type": "string",
            "enum": [
              "PDF",
              "WORD",
              "IMAGE",
              "VIDEO",
              "OTHER"
            ]
          },
          "roomId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "memberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "filename": {
            "type": "string",
            "example": "document1"
          },
          "createdAt": {
            "type": "string",
            "format": "ZonedDateTime",
            "example": 1624520984602
          }
        }
      },
      "Link": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "url": {
            "type": "string",
            "example": "https://docs.google.com/viewerng/vi54473784a6a2.xlsx"
          },
          "roomId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "createdAt": {
            "type": "string",
            "format": "ZonedDateTime",
            "example": 1624520984602
          }
        }
      },
      "OnlineEvent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "ownerMember": {
            "$ref": "#/components/schemas/UpdateMember"
          },
          "title": {
            "type": "string",
            "example": "Event to improve our programming skills"
          },
          "timestamp": {
            "type": "number",
            "example": 1554477388
          },
          "description": {
            "type": "string",
            "example": "Workshop given by a java expert to learn about good programming practices"
          },
          "imageUrl": {
            "type": "string",
            "example": "https://i.ytimg.com/vi/2nucjefSr6I/maxresdefault.jpg"
          },
          "url": {
            "type": "string",
            "example": "https://www.microsoft.com/es-es/microsoft-teams/log-in"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMember"
            }
          }
        }
      },
      "DirectChat": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "ownerMember": {
            "$ref": "#/components/schemas/UpdateMember"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "ZonedDateTime",
            "example": 1624520984602
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAction"
            }
          },
          "meetStarted": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "RoomAction": {
        "properties": {
          "name": {
            "type": "string",
            "example": "Submission Form"
          },
          "url": {
            "type": "string",
            "example": "dev.moonshot.com"
          }
        }
      },
      "Participant": {
        "properties": {
          "memberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "state": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        }
      },
      "FaceToFaceEvent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "ownerMember": {
            "$ref": "#/components/schemas/UpdateMember"
          },
          "title": {
            "type": "string",
            "example": "Event to improve our programming skills"
          },
          "timestamp": {
            "type": "number",
            "example": 1554477388
          },
          "description": {
            "type": "string",
            "example": "Workshop given by a java expert to learn about good programming practices"
          },
          "imageUrl": {
            "type": "string",
            "example": "https://i.ytimg.com/vi/2nucjefSr6I/maxresdefault.jpg"
          },
          "direction": {
            "type": "string",
            "example": "c/Alcala de Heranez, 17"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMember"
            }
          }
        }
      },
      "Message": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "roomId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "authorMemberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "content": {
            "type": "string",
            "example": "Send a example message"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "ZonedDateTime",
            "example": 1624520984602
          }
        }
      },
      "FollowUpRoom": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "ownerMember": {
            "$ref": "#/components/schemas/UpdateMember"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "ZonedDateTime",
            "example": 1624520984602
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAction"
            }
          },
          "title": {
            "type": "string",
            "example": "Follow up room example"
          },
          "description": {
            "type": "string",
            "example": "We want to test the operation of the room"
          },
          "state": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          }
        }
      },
      "PublicChannel": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "ownerMember": {
            "$ref": "#/components/schemas/UpdateMember"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "ZonedDateTime",
            "example": 1624520984602
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAction"
            }
          },
          "title": {
            "type": "string",
            "example": "Follow up room example"
          },
          "description": {
            "type": "string",
            "example": "We want to test the operation of the room"
          }
        }
      },
      "WallPost": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "ownerMember": {
            "$ref": "#/components/schemas/UpdateMember"
          },
          "content": {
            "type": "string",
            "example": "First wall post in this ecoystem"
          },
          "hashtags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "#WallPost"
            }
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WallPostAttachment"
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateComment"
            }
          },
          "likes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongo-id",
              "example": "60acae8e2f799d228a4d4a85"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "ZonedDateTime",
            "example": 1624520984602
          }
        }
      },
      "WallPostAttachment": {
        "properties": {
          "link": {
            "type": "string",
            "example": "https://docs.google.com/viewerng/vi54473784a6a2.xlsx"
          },
          "documentCategory": {
            "type": "string",
            "enum": [
              "PDF",
              "WORD",
              "IMAGE",
              "VIDEO",
              "OTHER"
            ]
          }
        }
      },
      "CreateComment": {
        "properties": {
          "content": {
            "type": "string",
            "example": "First comment"
          },
          "authorMember": {
            "$ref": "#/components/schemas/UpdateMember"
          },
          "likes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongo-id",
              "example": "60acae8e2f799d228a4d4a85"
            }
          }
        }
      },
      "Actor": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "type": {
            "type": "string",
            "enum": [
              "STARTUP",
              "COMPANY",
              "EXPERT",
              "PERSON_INVESTOR",
              "ORGANIZATION_INVESTOR",
              "MENTOR",
              "PUBLIC_ENTITY",
              "RESEARCH_GROUP",
              "TALENT",
              "UNIVERSITY",
              "NGO",
              "HUB",
              "CLUSTER"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "PENDING",
              "REJECTED"
            ]
          },
          "ownerMember": {
            "$ref": "#/components/schemas/UpdateMember"
          },
          "name": {
            "type": "string",
            "example": "Actor1"
          },
          "city": {
            "type": "string",
            "example": "Madrid"
          },
          "country": {
            "type": "string",
            "example": "Spain"
          },
          "address": {
            "type": "string",
            "example": "Avenida niza, 55, Madrid"
          },
          "latitude": {
            "type": "number",
            "example": 10.6
          },
          "longitude": {
            "type": "number",
            "example": 50.3
          },
          "description": {
            "type": "string",
            "example": "This is a example"
          },
          "phone": {
            "type": "string",
            "format": "telephone number",
            "example": 34999999999
          },
          "web": {
            "type": "string",
            "example": "www.example.com"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "myFacet": {
            "$ref": "#/components/schemas/Facet"
          },
          "questFacet": {
            "$ref": "#/components/schemas/Facet"
          },
          "investment": {
            "$ref": "#/components/schemas/Investment"
          },
          "financial": {
            "$ref": "#/components/schemas/Financial"
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www.instagram.com/actor1"
            }
          },
          "media": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www.vimeo.com/actor1"
            }
          }
        }
      },
      "Facet": {
        "properties": {
          "industries": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "ELECTRICAL_EQUIPMENT, MACHINERY_AND_EQUIPMENT"
            }
          },
          "businessModels": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "CONSUMER_PRODUCTS, ECOMMERCE"
            }
          },
          "socialInnovations": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "PEACE_AND_JUSTICE_STRONG_INSTITUTIONS, REDUCED_INEQUALITIES, CLIMATE_ACTION, GENDER_EQUALITY, NO_POVERTY"
            }
          },
          "deepTechs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "SMART_DATA_DISCOVERY, CLOUD_COMPUTING"
            }
          }
        }
      },
      "Investment": {
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "GOT_DECK",
              "BUSINESS_PLAN",
              "FIRST_PROTOTYPE",
              "INITIAL_INTEREST",
              "GOT_BETA",
              "VIRALITY_SCALABILITY",
              "FIXED_BETA",
              "STARTED_INVOICE",
              "RUNNING_BUSINESS"
            ]
          },
          "stagesInvestments": {
            "type": "string",
            "example": "Late Stage"
          },
          "numberPastExist": {
            "type": "number",
            "example": 2
          },
          "trlStage": {
            "type": "string",
            "enum": [
              "BASIC_PRINCIPLES_OBSERVED",
              "TECHNOLOGY_CONCEPT_FORMULATED",
              "EXPERIMENTAL_PROOF_OF_CONCEPT",
              "TECHNOLOGY_VALIDATED_IN_LAB",
              "TECHNOLOGY_VALIDATED_IN_RELEVANT_ENVIRONMENT",
              "TECHNOLOGY_DEMONSTRATED_IN_RELEVANT_ENVIRONMENT",
              "SYSTEM_PROTOTYPE_DEMONSTRATION_IN_OPERATIONAL_ENVIRONMENT",
              "SYSTEM_COMPLETE_AND_QUALIFIED",
              "ACTUAL_SYSTEM_PROVEN_IN_OPERATIONAL_ENVIRONMENT"
            ]
          },
          "numberCurrentInvestments": {
            "type": "number",
            "example": 5
          },
          "countriesInteres": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Unite States, Spain, France"
            }
          }
        }
      },
      "Financial": {
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "GOT_DECK",
              "BUSINESS_PLAN",
              "FIRST_PROTOTYPE",
              "INITIAL_INTEREST",
              "GOT_BETA",
              "VIRALITY_SCALABILITY",
              "FIXED_BETA",
              "STARTED_INVOICE",
              "RUNNING_BUSINESS"
            ]
          },
          "seekedCapital": {
            "type": "number",
            "example": 790000
          },
          "trlStage": {
            "type": "string",
            "enum": [
              "BASIC_PRINCIPLES_OBSERVED",
              "TECHNOLOGY_CONCEPT_FORMULATED",
              "EXPERIMENTAL_PROOF_OF_CONCEPT",
              "TECHNOLOGY_VALIDATED_IN_LAB",
              "TECHNOLOGY_VALIDATED_IN_RELEVANT_ENVIRONMENT",
              "TECHNOLOGY_DEMONSTRATED_IN_RELEVANT_ENVIRONMENT",
              "SYSTEM_PROTOTYPE_DEMONSTRATION_IN_OPERATIONAL_ENVIRONMENT",
              "SYSTEM_COMPLETE_AND_QUALIFIED",
              "ACTUAL_SYSTEM_PROVEN_IN_OPERATIONAL_ENVIRONMENT"
            ]
          },
          "raisedCapital": {
            "type": "number",
            "example": 30000
          },
          "totalFunding": {
            "type": "number",
            "example": 50000
          },
          "premoneyValuation": {
            "type": "number",
            "example": 38000
          },
          "fundingStage": {
            "type": "string",
            "enum": [
              "PRE_SEED",
              "SEED",
              "GROWTH_CAPITAL",
              "SERIES_A",
              "SERIES_B",
              "SERIES_C",
              "SERIES_D_E_F",
              "GRANT"
            ]
          },
          "lastFunding": {
            "type": "string",
            "format": "LocalDate",
            "example": "2019-04-01T00:00:00.000Z"
          },
          "numberEmployees": {
            "type": "number",
            "example": 900
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "EUR"
            ]
          }
        }
      },
      "User": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "pedrojimenez@gmail.com"
          },
          "memberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        }
      },
      "Role": {
        "type": "string",
        "example": "DEV:ECOSYSTEM_MANAGER"
      },
      "Permission": {
        "type": "string",
        "example": "DEV:ONLINE_EVENT_CREATE"
      },
      "Project": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "actorId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "name": {
            "type": "string",
            "example": "Trade secret"
          },
          "description": {
            "type": "string",
            "example": "Trade secret"
          },
          "trlStage": {
            "type": "string",
            "enum": [
              "BASIC_PRINCIPLES_OBSERVED",
              "TECHNOLOGY_CONCEPT_FORMULATED",
              "EXPERIMENTAL_PROOF_OF_CONCEPT",
              "TECHNOLOGY_VALIDATED_IN_LAB",
              "TECHNOLOGY_VALIDATED_IN_RELEVANT_ENVIRONMENT",
              "TECHNOLOGY_DEMONSTRATED_IN_RELEVANT_ENVIRONMENT",
              "SYSTEM_PROTOTYPE_DEMONSTRATION_IN_OPERATIONAL_ENVIRONMENT",
              "SYSTEM_COMPLETE_AND_QUALIFIED",
              "ACTUAL_SYSTEM_PROVEN_IN_OPERATIONAL_ENVIRONMENT"
            ]
          },
          "media": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www.vimeo.com/actor1"
            }
          },
          "protectionMethod": {
            "type": "string",
            "enum": [
              "PATENTS",
              "TRADE_SECRETS",
              "COMPUTER_ALGORITHMS",
              "DESIGN",
              "DATABASE",
              "TRADEMARK",
              "COPYRIGHT",
              "INDUSTRIAL_DESIGN"
            ]
          },
          "projectManager": {
            "$ref": "#/components/schemas/UpdateMember"
          },
          "teamMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMember"
            }
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "https://www.instagram.com/user1, https://www.twitter.com/user1, https://www.linkedln.com/user1"
            }
          },
          "deepTechs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "SMART_DATA_DISCOVERY, CLOUD_COMPUTING"
            }
          },
          "businessModels": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "CONSUMER_PRODUCTS, ECOMMERCE"
            }
          },
          "industries": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "ELECTRICAL_EQUIPMENT, MACHINERY_AND_EQUIPMENT"
            }
          },
          "socialInnovations": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "PEACE_AND_JUSTICE_STRONG_INSTITUTIONS, REDUCED_INEQUALITIES, CLIMATE_ACTION, GENDER_EQUALITY, NO_POVERTY"
            }
          }
        }
      },
      "MemberSetFcmTokenEvent": {
        "required": [
          "memberId",
          "fcmTokens"
        ],
        "properties": {
          "memberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "fcmTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FcmToken"
            }
          }
        }
      },
      "FcmToken": {
        "properties": {
          "tokenId": {
            "type": "string",
            "format": "Firebase token",
            "example": "enMcvL2-3YDmhocf25g5Nk:APA91bEljU6wo1S7Bj"
          },
          "device": {
            "type": "string",
            "example": "laptop/computer"
          },
          "timestamp": {
            "type": "number",
            "format": "timestamp",
            "example": 1639687246
          }
        }
      },
      "OnlineEventCreateEvent": {
        "required": [
          "title",
          "timestamp",
          "description"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Event to improve our programming skills"
          },
          "timestamp": {
            "type": "number",
            "example": 1554477388
          },
          "description": {
            "type": "string",
            "example": "Workshop given by a java expert to learn about good programming practices"
          },
          "imageUrl": {
            "type": "string",
            "example": "https://i.ytimg.com/vi/2nucjefSr6I/maxresdefault.jpg"
          },
          "url": {
            "type": "string",
            "example": "https://www.microsoft.com/es-es/microsoft-teams/log-in"
          }
        }
      },
      "OnlineEventUpdateEvent": {
        "required": [
          "id",
          "title",
          "timestamp",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "title": {
            "type": "string",
            "example": "Event to improve our programming skills"
          },
          "timestamp": {
            "type": "number",
            "example": 1554477388
          },
          "description": {
            "type": "string",
            "example": "Workshop given by a java expert to learn about good programming practices"
          },
          "imageUrl": {
            "type": "string",
            "example": "https://i.ytimg.com/vi/2nucjefSr6I/maxresdefault.jpg"
          },
          "url": {
            "type": "string",
            "example": "https://www.microsoft.com/es-es/microsoft-teams/log-in"
          }
        }
      },
      "OnlineEventSubscriptionEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMember"
            }
          }
        }
      },
      "OnlineEventUnsubscriptionEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMember"
            }
          }
        }
      },
      "MemberEducationCreateEvent": {
        "required": [
          "school",
          "degree",
          "address",
          "startDate",
          "description"
        ],
        "properties": {
          "school": {
            "type": "string",
            "example": "Hardvard University"
          },
          "degree": {
            "type": "string",
            "example": "Informatics Engineering"
          },
          "fieldOfStudy": {
            "type": "string",
            "example": "Software Engineering"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "startDate": {
            "type": "number",
            "format": "number of days since 01-01-1970",
            "example": 167999
          },
          "endDate": {
            "type": "number",
            "format": "number of days since 01-01-1970",
            "example": 167999
          },
          "grade": {
            "type": "number",
            "example": 8
          },
          "description": {
            "type": "string",
            "example": "Harvard University is a private institution that was founded in 1636"
          }
        }
      },
      "MemberEducationUpdateEvent": {
        "required": [
          "id",
          "school",
          "degree",
          "address",
          "startDate",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "school": {
            "type": "string",
            "example": "Hardvard University"
          },
          "degree": {
            "type": "string",
            "example": "Informatics Engineering"
          },
          "fieldOfStudy": {
            "type": "string",
            "example": "Software Engineering"
          },
          "location": {
            "$ref": "#/components/schemas/Address"
          },
          "startDate": {
            "type": "string",
            "format": "number of days since 01-01-1970",
            "example": 167999
          },
          "endDate": {
            "type": "string",
            "format": "number of days since 01-01-1970",
            "example": 167999
          },
          "grade": {
            "type": "number",
            "example": 8
          },
          "description": {
            "type": "string",
            "example": "Harvard University is a private institution that was founded in 1636"
          }
        }
      },
      "MemberExperienceCreateEvent": {
        "required": [
          "title",
          "company",
          "address",
          "startDate",
          "description"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Back-end developer en Moonshot Innovation"
          },
          "company": {
            "type": "string",
            "example": "Moonshot Innovation"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "startDate": {
            "type": "string",
            "format": "number of days since 01-01-1970",
            "example": 167999
          },
          "endDate": {
            "type": "string",
            "format": "number of days since 01-01-1970",
            "example": 167999
          },
          "description": {
            "type": "string",
            "example": "Scrum manager in Moonshot Innovation"
          }
        }
      },
      "MemberExperienceUpdateEvent": {
        "required": [
          "id",
          "title",
          "company",
          "adress",
          "startDate",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "title": {
            "type": "string",
            "example": "Back-end developer en Moonshot Innovation"
          },
          "company": {
            "type": "string",
            "example": "Moonshot Innovation"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "startDate": {
            "type": "string",
            "format": "LocalDate",
            "example": "2021-03-01T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "format": "LocalDate",
            "example": "2021-03-01T00:00:00.000Z"
          },
          "description": {
            "type": "string",
            "example": "Scrum manager in Moonshot Innovation"
          }
        }
      },
      "FaceToFaceEventSubscriptionEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMember"
            }
          }
        }
      },
      "FaceToFaceEventUnsubscriptionEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMember"
            }
          }
        }
      },
      "FaceToFaceEventCreateEvent": {
        "required": [
          "title",
          "description"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Event to improve our programming skills"
          },
          "timestamp": {
            "type": "number",
            "example": 1554477388
          },
          "description": {
            "type": "string",
            "example": "Workshop given by a java expert to learn about good programming practices"
          },
          "imageUrl": {
            "type": "string",
            "example": "https://i.ytimg.com/vi/2nucjefSr6I/maxresdefault.jpg"
          },
          "direction": {
            "type": "string",
            "example": "c/Alcala de Heranez, 17"
          }
        }
      },
      "FaceToFaceEventUpdateEvent": {
        "required": [
          "id",
          "title",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "title": {
            "type": "string",
            "example": "Event to improve our programming skills"
          },
          "timestamp": {
            "type": "number",
            "example": 1554477388
          },
          "description": {
            "type": "string",
            "example": "Workshop given by a java expert to learn about good programming practices"
          },
          "imageUrl": {
            "type": "string",
            "example": "https://i.ytimg.com/vi/2nucjefSr6I/maxresdefault.jpg"
          },
          "direction": {
            "type": "string",
            "example": "c/Alcala de Heranez, 17"
          }
        }
      },
      "PublicChannelCreateEvent": {
        "required": [
          "title",
          "description"
        ],
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantAnyEvent"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAction"
            }
          },
          "title": {
            "type": "string",
            "example": "Follow up room example"
          },
          "description": {
            "type": "string",
            "example": "We want to test the operation of the room"
          },
          "meetStarted": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "PublicChannelUpdateEvent": {
        "required": [
          "id",
          "title",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "ownerMemberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantAnyEvent"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAction"
            }
          },
          "title": {
            "type": "string",
            "example": "Follow up room example"
          },
          "description": {
            "type": "string",
            "example": "We want to test the operation of the room"
          },
          "meetStarted": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "PublicChannelSubscribeEvent": {
        "required": [
          "id",
          "memberId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "memberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "PublicChannelUnsubscribeEvent": {
        "required": [
          "id",
          "memberId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "memberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "WallPostCreateEvent": {
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "type": "string",
            "example": "First wall post in this ecoystem"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WallPostAttachment"
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateComment"
            }
          },
          "likes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongo-id",
              "example": "60acae8e2f799d228a4d4a85"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "ZonedDateTime",
            "example": 1624520984602
          }
        }
      },
      "WallPostUpdateEvent": {
        "required": [
          "id",
          "content"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "content": {
            "type": "string",
            "example": "First wall post in this ecoystem"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WallPostAttachment"
            }
          }
        }
      },
      "WallPostLikeEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "WallPostUnlikeEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "WallPostCommentAddEvent": {
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/CreateComment"
          }
        }
      },
      "WallPostCommentLikeEvent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "commentId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "WallPostCommentUnlikeEvent": {
        "required": [
          "id",
          "memberId",
          "commentId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "memberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "commentId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "ActorCreateEvent": {
        "required": [
          "ownerMember",
          "name",
          "image",
          "country",
          "description",
          "address",
          "latitude",
          "longitude",
          "email"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "STARTUP",
              "COMPANY",
              "EXPERT",
              "PERSON_INVESTOR",
              "ORGANIZATION_INVESTOR",
              "MENTOR",
              "PUBLIC_ENTITY",
              "RESEARCH_GROUP",
              "TALENT",
              "UNIVERSITY",
              "NGO",
              "HUB",
              "CLUSTER"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "PENDING",
              "REJECTED"
            ]
          },
          "ownerMember": {
            "$ref": "#/components/schemas/CreateMember"
          },
          "name": {
            "type": "string",
            "example": "Actor1"
          },
          "city": {
            "type": "string",
            "example": "Madrid"
          },
          "country": {
            "type": "string",
            "example": "Spain"
          },
          "address": {
            "type": "string",
            "example": "Avenida niza, 55, Madrid"
          },
          "latitude": {
            "type": "number",
            "example": 10.6
          },
          "longitude": {
            "type": "number",
            "example": 50.3
          },
          "description": {
            "type": "string",
            "example": "This is a example"
          },
          "phone": {
            "type": "string",
            "format": "telephone number",
            "example": 34999999999
          },
          "web": {
            "type": "string",
            "example": "www.example.com"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "myFacet": {
            "$ref": "#/components/schemas/Facet"
          },
          "questFacet": {
            "$ref": "#/components/schemas/Facet"
          },
          "investment": {
            "$ref": "#/components/schemas/Investment"
          },
          "financial": {
            "$ref": "#/components/schemas/Financial"
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www.instagram.com/actor1"
            }
          },
          "media": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www.vimeo.com/actor1"
            }
          }
        }
      },
      "ActorUpdateEvent": {
        "required": [
          "id",
          "ownerMember",
          "name",
          "image",
          "country",
          "description",
          "address",
          "latitude",
          "longitude",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "type": {
            "type": "string",
            "enum": [
              "STARTUP",
              "COMPANY",
              "EXPERT",
              "PERSON_INVESTOR",
              "ORGANIZATION_INVESTOR",
              "MENTOR",
              "PUBLIC_ENTITY",
              "RESEARCH_GROUP",
              "TALENT",
              "UNIVERSITY",
              "NGO",
              "HUB",
              "CLUSTER"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "PENDING",
              "REJECTED"
            ]
          },
          "name": {
            "type": "string",
            "example": "Actor1"
          },
          "city": {
            "type": "string",
            "example": "Madrid"
          },
          "country": {
            "type": "string",
            "example": "Spain"
          },
          "address": {
            "type": "string",
            "example": "Avenida niza, 55, Madrid"
          },
          "latitude": {
            "type": "number",
            "example": 10.6
          },
          "longitude": {
            "type": "number",
            "example": 50.3
          },
          "description": {
            "type": "string",
            "example": "This is a example"
          },
          "phone": {
            "type": "string",
            "format": "telephone number",
            "example": 34999999999
          },
          "web": {
            "type": "string",
            "example": "www.example.com"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "myFacet": {
            "$ref": "#/components/schemas/Facet"
          },
          "questFacet": {
            "$ref": "#/components/schemas/Facet"
          },
          "investment": {
            "$ref": "#/components/schemas/Investment"
          },
          "financial": {
            "$ref": "#/components/schemas/Financial"
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www.instagram.com/actor1"
            }
          },
          "media": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www.vimeo.com/actor1"
            }
          }
        }
      },
      "ActorAcceptEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "ActorRejectEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "MemberUpdateEvent": {
        "required": [
          "id",
          "name",
          "lastname",
          "email",
          "about",
          "image"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "61445159784bca6ef764c6df"
          },
          "name": {
            "type": "string",
            "example": "Carlos"
          },
          "lastname": {
            "type": "string",
            "example": "Guarin"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "pruebaemail@gmail.com"
          },
          "about": {
            "type": "string",
            "example": "Developer"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "https://www.instagram.com/user1, https://www.twitter.com/user1, https://www.linkedln.com/user1"
            }
          }
        }
      },
      "ProjectCreateEvent": {
        "required": [
          "actorId",
          "name",
          "description",
          "trlStage",
          "media",
          "protectionMethod",
          "projectManagerId",
          "teamMembersIds",
          "socialNetworks",
          "deepTechs",
          "businessModels",
          "industries",
          "socialInnovation"
        ],
        "properties": {
          "actorId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "name": {
            "type": "string",
            "example": null
          },
          "description": {
            "type": "string",
            "example": null
          },
          "trlStage": {
            "type": "string",
            "enum": [
              "BASIC_PRINCIPLES_OBSERVED",
              "TECHNOLOGY_CONCEPT_FORMULATED",
              "EXPERIMENTAL_PROOF_OF_CONCEPT",
              "TECHNOLOGY_VALIDATED_IN_LAB",
              "TECHNOLOGY_VALIDATED_IN_RELEVANT_ENVIRONMENT",
              "TECHNOLOGY_DEMONSTRATED_IN_RELEVANT_ENVIRONMENT",
              "SYSTEM_PROTOTYPE_DEMONSTRATION_IN_OPERATIONAL_ENVIRONMENT",
              "SYSTEM_COMPLETE_AND_QUALIFIED",
              "ACTUAL_SYSTEM_PROVEN_IN_OPERATIONAL_ENVIRONMENT"
            ]
          },
          "media": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www.vimeo.com/actor1"
            }
          },
          "protectionMethod": {
            "type": "string",
            "enum": [
              "PATENTS",
              "TRADE_SECRETS",
              "COMPUTER_ALGORITHMS",
              "DESIGN",
              "DATABASE",
              "TRADEMARK",
              "COPYRIGHT",
              "INDUSTRIAL_DESIGN"
            ]
          },
          "projectManagerId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "teamMembersIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongo-id",
              "example": "60acae8e2f799d228a4d4a85"
            }
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "https://www.instagram.com/user1, https://www.twitter.com/user1, https://www.linkedln.com/user1"
            }
          },
          "deepTechs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "SMART_DATA_DISCOVERY, CLOUD_COMPUTING"
            }
          },
          "businessModels": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "CONSUMER_PRODUCTS, ECOMMERCE"
            }
          },
          "industries": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "ELECTRICAL_EQUIPMENT, MACHINERY_AND_EQUIPMENT"
            }
          },
          "socialInnovations": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "PEACE_AND_JUSTICE_STRONG_INSTITUTIONS, REDUCED_INEQUALITIES, CLIMATE_ACTION, GENDER_EQUALITY, NO_POVERTY"
            }
          }
        }
      },
      "ProjectUpdateEvent": {
        "required": [
          "id",
          "actorId",
          "name",
          "description",
          "trlStage",
          "media",
          "protectionMethod",
          "projectManagerId",
          "teamMembersIds",
          "socialNetworks",
          "deepTechs",
          "businessModels",
          "industries",
          "socialInnovation"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "actorId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "name": {
            "type": "string",
            "example": null
          },
          "description": {
            "type": "string",
            "example": null
          },
          "trlStage": {
            "type": "string",
            "enum": [
              "BASIC_PRINCIPLES_OBSERVED",
              "TECHNOLOGY_CONCEPT_FORMULATED",
              "EXPERIMENTAL_PROOF_OF_CONCEPT",
              "TECHNOLOGY_VALIDATED_IN_LAB",
              "TECHNOLOGY_VALIDATED_IN_RELEVANT_ENVIRONMENT",
              "TECHNOLOGY_DEMONSTRATED_IN_RELEVANT_ENVIRONMENT",
              "SYSTEM_PROTOTYPE_DEMONSTRATION_IN_OPERATIONAL_ENVIRONMENT",
              "SYSTEM_COMPLETE_AND_QUALIFIED",
              "ACTUAL_SYSTEM_PROVEN_IN_OPERATIONAL_ENVIRONMENT"
            ]
          },
          "media": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www.vimeo.com/actor1"
            }
          },
          "protectionMethod": {
            "type": "string",
            "enum": [
              "PATENTS",
              "TRADE_SECRETS",
              "COMPUTER_ALGORITHMS",
              "DESIGN",
              "DATABASE",
              "TRADEMARK",
              "COPYRIGHT",
              "INDUSTRIAL_DESIGN"
            ]
          },
          "projectManagerId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "teamMembersIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongo-id",
              "example": "60acae8e2f799d228a4d4a85"
            }
          },
          "socialNetworks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "https://www.instagram.com/user1, https://www.twitter.com/user1, https://www.linkedln.com/user1"
            }
          },
          "deepTechs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "SMART_DATA_DISCOVERY, CLOUD_COMPUTING"
            }
          },
          "businessModels": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "CONSUMER_PRODUCTS, ECOMMERCE"
            }
          },
          "industries": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "ELECTRICAL_EQUIPMENT, MACHINERY_AND_EQUIPMENT"
            }
          },
          "socialInnovations": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "PEACE_AND_JUSTICE_STRONG_INSTITUTIONS, REDUCED_INEQUALITIES, CLIMATE_ACTION, GENDER_EQUALITY, NO_POVERTY"
            }
          }
        }
      },
      "CsvFormat": {
        "required": [
          "member_name",
          "member_lastname",
          "member_address",
          "member_latitude",
          "member_longitude",
          "member_email",
          "member_about",
          "member_image_content_type",
          "member_image_url",
          "actor_type",
          "actor_name",
          "actor_country",
          "actor_address",
          "actor_latitude",
          "actor_longitude",
          "actor_description",
          "actor_image_content_type",
          "actor_image_url"
        ],
        "properties": {
          "member_name": {
            "type": "string",
            "example": "Jose"
          },
          "member_lastname": {
            "type": "string",
            "example": "Fernandez"
          },
          "member_address": {
            "type": "string",
            "example": "c/Paseo de campo, 3"
          },
          "member_latitude": {
            "type": "number",
            "example": 10.6
          },
          "member_longitude": {
            "type": "number",
            "example": 19.1
          },
          "member_email": {
            "type": "string",
            "format": "email",
            "example": "example1@gmail.com"
          },
          "member_about": {
            "type": "string",
            "example": "Moonshot developer"
          },
          "member_image_content_type": {
            "type": "string",
            "example": "image/png"
          },
          "member_image_url": {
            "type": "string",
            "example": "https://dev.moonshot.ceo/image1.png"
          },
          "actor_type": {
            "type": "string",
            "enum": [
              "STARTUP",
              "COMPANY",
              "EXPERT",
              "PERSON_INVESTOR",
              "ORGANIZATION_INVESTOR",
              "MENTOR",
              "PUBLIC_ENTITY",
              "RESEARCH_GROUP",
              "TALENT",
              "UNIVERSITY",
              "NGO",
              "HUB",
              "CLUSTER"
            ]
          },
          "actor_name": {
            "type": "string",
            "example": "Casual Enterprise S.L"
          },
          "actor_city": {
            "type": "string",
            "example": "Madrid"
          },
          "actor_country": {
            "type": "string",
            "example": "Spain"
          },
          "actor_address": {
            "type": "string",
            "example": "c/Pase de campo, 3"
          },
          "actor_latitude": {
            "type": "number",
            "example": 10.6
          },
          "actor_longitude": {
            "type": "number",
            "example": 19.1
          },
          "actor_description": {
            "type": "string",
            "example": "Moonshot innovation enterprise"
          },
          "actor_phone": {
            "type": "string",
            "example": 34666666666
          },
          "actor_web": {
            "type": "string",
            "example": "https://dev.moonshot.ceo"
          },
          "actor_image_content_type": {
            "type": "string",
            "example": "image/png"
          },
          "actor_image_url": {
            "type": "string",
            "example": "https://dev.moonshot.ceo/image1.png"
          },
          "my_facet_industries": {
            "type": "string",
            "enum": [
              "AGRICULTURE_FORESTRY_AND_FISHING",
              "ARTS_AND_ENTERTAINMENT",
              "BIOTECHNOLOGY",
              "CHEMICALS",
              "COMPUTER_AND_ELECTRONICS",
              "CONSTRUCTION",
              "DEFENSE_AND_SECURITY",
              "DISTRIBUTION_AND_LOGISTICS",
              "EDUCATION",
              "ELECTRICAL_EQUIPMENT",
              "ELECTRICITY_AND_GAS",
              "FINTECH_FINANCIAL_AND_INSURANCE",
              "FOOD_AND_BEVERAGES",
              "HEALTH_CARE",
              "HEAVY_EQUIPMENT",
              "HOTEL",
              "INFORMATION_TECHNOLOGY",
              "INTERNET_OF_THINGS",
              "LEGAL_ACCOUNTING_ARCHITECTURE_AND_PROFESSIONAL_SERVICES",
              "MACHINERY_AND_EQUIPMENT"
            ]
          },
          "my_facet_business_models": {
            "type": "string",
            "enum": [
              "TECHNOLOGY",
              "ECOMMERCE",
              "WEARABLES",
              "AGENCY",
              "MARKETING",
              "SERVICES",
              "SAAS",
              "CONSUMER_PRODUCTS",
              "OTHER"
            ]
          },
          "my_facet_social_innovations": {
            "type": "string",
            "enum": [
              "NO_POVERTY",
              "ZERO_HUNGER",
              "GOOD_HEALTH_AND_WELLBEING",
              "QUALITY_EDUCATION",
              "GENDER_EQUALITY",
              "CLEAN_WATER_AND_SANITATION",
              "AFFORDABLE_AND_CLEAN_ENERGY",
              "DECENT_WORK_AND_ECONOMIC_GROWTH",
              "INDUSTRY_INNOVATION_AND_INFRASTRUCTURE",
              "REDUCED_INEQUALITIES",
              "SUSTAINABLE_CITIES_AND_COMMUNITIES",
              "RESPONSABLE_CONSUMPTION_AND_PRODUCTION",
              "CLIMATE_ACTION",
              "LIFE_BELOW_WATER",
              "LIFE_ON_LAND",
              "PEACE_AND_JUSTICE_STRONG_INSTITUTIONS",
              "PARTNERSHIP_FOR_THE_GOALS"
            ]
          },
          "my_facet_deep_techs": {
            "type": "string",
            "enum": [
              "BIOACTIVE_MATERIALS",
              "BIOCOMPATIBLE_ALLOYS_AND_POLYMERS",
              "BIOMIMETICS",
              "BIOSENSING_MATERIALS",
              "DRUG_RELEASING_POLYMERS",
              "ADVANCED_METALS_AND_ALLOYS",
              "ELECTROACTIVE_POLYMERS",
              "FERROELECTRIC_MATERIALS",
              "FIRE_RESISTANT_MATERIALS",
              "FUNCTIONALCOATINGS_SURFACE_TREATMENTS",
              "MAGNETOSTRICTIVE_MATERIALS",
              "METAMATERIALS",
              "PIEZOELECTRIC_MATERIALS",
              "SHAPE_MEMORY_POLYMERS_AND_ALLOYS",
              "SUPERCONDUCTIVE_MATERIALS",
              "QUANTUM_DOTS",
              "MOLECULARY_IMPRINTED_POLYMERS",
              "CARBON_NANOTUBES",
              "DATA_STORAGE",
              "ELECTROCHEMICAL_COMPONENTS",
              "GRAPHENE",
              "NANOCELLULOSE",
              "NANOCOMPOSITES",
              "NANOPOROUS_MATERIALS",
              "NANOWIRES",
              "COMMERCIAL_UAVS",
              "CONDUCTIVE_POLYMERS",
              "DRONES",
              "MEMS",
              "MOLECULAR_TRANSISTORS",
              "ELECTRONIC_NANOTUBES",
              "SMART_DUST",
              "SMART_ROBOTS",
              "SMART_SENSORS_AND_MONITORING",
              "THIN_FILM_SOLAR_CELLS_OPV",
              "SOTS/SOFA",
              "TELEMATIC_AND_V2X",
              "PREDICTIVE_MAINTENANCE",
              "MANUFACTURING_EXECUTION_SYSTEM_(MES)",
              "SAFETY",
              "AUTONOMOUS_CAR",
              "AUTONOMOUS_DRIVING",
              "POWERTRAIN",
              "IOT_AND_IIOT_PLATFORMS",
              "KERFLESS_WAFER_TECHNOLOGY",
              "ADVANCED_AND_ENGINEERING_POLYMERS_TECHNICAL_THERMOPLASTIC",
              "ADVANCED_CERAMICS",
              "ADVANCED_COMPOSITES",
              "ADVANCED_METALLIC_FOAMS",
              "HIGH_PERFORMANCE_CONCRETE",
              "PLATFORM_CONSOLIDATION",
              "VAT_PHOTOPOLYMERISATION",
              "MATERIAL_JETTING",
              "BINDER_JETTING",
              "MATERIAL_EXTRUSION",
              "POWDER_BED_FUSION",
              "SHEET_LAMINATION",
              "DIRECTED_ENERGY_DEPOSITION",
              "ENERGY_EFFICIENCY_IN_BUILDINGS",
              "GREEN_MATERIALS",
              "INDOOR_AIR_QUALITY",
              "RESOURCE_EFFICIENCY_IN_BUILDING",
              "IRRIGATION",
              "VALUE_ADDED_RESOURCES_FROM_WATER",
              "WATER_FILTRATION",
              "WATER_HARVESTING",
              "WATER_INFRASTRUCTURE_AND_DISTRIBUTION",
              "WATER_RESOURCE_IDENTIFICATION",
              "PLASTIC_WASTE_TECHNOLOGIES",
              "BIOREACTOR_LANDFILL",
              "MECHANICAL_BIOLOGICAL_TREATMENT_OF_MUNICIPAL_SOLID_WASTE",
              "PLASMA_GASIFICATION",
              "WASTE_RECYCLING",
              "WASTE_CONVERSION_TECHNOLOGIES",
              "DESALINATION",
              "INDUSTRIAL_AND_PRODUCED_WATER_PROCESSES",
              "POINT_OF_USE_WATER_TREATMENT",
              "WASTE_WATER_TREATMENT",
              "WATER_DESINFECTION",
              "ELECTROLYSIS",
              "AGRICULTURAL_TECHNOLOGIES",
              "ANIMAL_HEALTH",
              "CROP_PROTECTION",
              "CULTIVATION_AND_POST_HARVEST",
              "FISHERIES_AND_AQUATIC_ECOSYSTEMS_TECHNOLOGIES",
              "FOOD_TECHNOLOGIES",
              "GREENHOUSE",
              "NEW_GENERATION_FERTILIZERS",
              "SEEDS_AND_PROPAGATION",
              "CARBON_CAPTURE_AND_STORAGE_CARBON_CAPTURE_USE_AND_STORAGE",
              "CATALYTIC_CONVERTER",
              "EMISSIONS_BIOLOGICAL_TREATMENT",
              "EMISSION_MONITORING",
              "SCRUBBING_SYSTEMS",
              "AIR_PURIFICATION_TECHNOLOGIES",
              "BIOMASS",
              "CONCENTRATED_SOLAR_POWER",
              "GEOTHERMAL",
              "HYDROGEN_FUEL_CELL",
              "MARINE_RENEWABLES",
              "OCEAN_AND_HYDROGEN",
              "SOLAR_ENERGY",
              "WIND",
              "KINETIC",
              "THERMAL_ENERGY",
              "WASTE_HEAT_RECOVERY",
              "EFFICIENT_HEATING_AND_COOLING",
              "HOME_AND_FACILITIES_ENERGY_MANAGEMENT",
              "INDUSTRIAL_ENERGY_MANAGEMENT",
              "LIGHTING",
              "SMART_APPLIANCES",
              "SSL",
              "LIGHT_EMITTING_DIODE",
              "ORGANIC_LIGHT_EMITTING_DIODE",
              "FUEL_CELLS",
              "LITHIUM_ION",
              "METAL_AIR",
              "REDOX_FLOW_BATTERIES",
              "SUPERCAPACITORS",
              "BATTERY_MANAGEMENT_SYSTEM",
              "ON_BOARD_FAST_CHARGING",
              "POWERTRAIN",
              "NANOWIRE_BATTERIES",
              "TENG_TRIBOELECTRIC_NANOGENERATOR",
              "GRAPHENE_BATTERIES",
              "FOAM_BATTERIES",
              "SODIUM_ION_BATTERIES",
              "LIQUID_FLOW_BATTERIES",
              "CARBON_ION_BATTERY",
              "ZINC_AIR_BATTERIES",
              "STRETCHABLE_BATTERIES",
              "SMART_CLOTHING_BATTERY",
              "SOUND_POWERED_CHARGING",
              "URINE_POWERED_BATTERIES",
              "ALUMINIUM_AIR_BATTERY",
              "FLASH_BATTERIES",
              "ITES",
              "GEOMECHANICAL_PUMPED_STORAGE",
              "KINETIC_ENERGY_STORAGE",
              "VANADIUM_FLOW_BATTERY",
              "CHARGING_INFRASTRUCTURE",
              "MANAGEMENT",
              "MANAGEMENT_MEASURING_AND_CONTROL",
              "MICROGRIDS",
              "SMART_METERS",
              "OVER_THE_AIR_CHARGING",
              "BIO_HEATING",
              "BIODIESEL_ADVANCED",
              "CO_GENERATION",
              "MICROBIOME",
              "BRAIN_COMPUTER_INTERFACE",
              "COGNITIVE_EXPERT_ADVISORS",
              "DEEP_LEARNING",
              "EDGE_INTELLIGENCE",
              "ENTERPRISE_TAXONOMY_AND_ONTOLOGY_MANAGEMENT",
              "GENERAL_PURPOSE_MACHINE_INTELLIGENCE",
              "HUMAN_COMPUTER_INTERACTION",
              "MACHINE_LEARNING",
              "NATURAL_LANGUAGE_QUESTION_ANSWERING",
              "NEURAL_NETWORKS_AND_SEMANTIC_SEARCH_ENGINES",
              "QUANTUM_COMPUTING",
              "SENTIMENTAL_ANALYSIS",
              "CONVOLUTIONAL_NEURAL_NETWORK",
              "COMPUTER_VISION",
              "BYOD_AND_BORDERLESS_APPS",
              "CLOUD_COMPUTING",
              "CONTEXT_BROKERING",
              "DATA_ANALYTICS",
              "DATA_BROKER_PAAS",
              "MICRO_DATA_CENTERS",
              "PERSONAL_ANALYTICS",
              "SMART_DATA_DISCOVERY",
              "SOFTWARE_DEFINED_ANYTHING",
              "ASSET_MANAGEMENT",
              "AUGMENTED_WRITING",
              "PUBLIC_BLOCKCHAIN",
              "PRIVATE_BLOCKCHAIN",
              "CONSORTIUM_BLOCKCHAIN",
              "ANTIFRAUD_AND_IDENTITY_MANAGEMENT",
              "AUTOMATED_SECURITY",
              "BEHAVIORAL_ANALYTICS_AND_ANOMALY_DETECTION",
              "CREDENTIAL_MANAGEMENT",
              "CYBER_RISK_MANAGEMENT",
              "DECEPTION_SECURITY",
              "DEVICE_AUTHENTICATION",
              "IDENTITY_AS_A_SERVICE",
              "PREDICTIVE_INTELLIGENCE",
              "QUANTUM_ENCRYPTION",
              "THREAT_INTELLIGENCE",
              "FOTA",
              "MOBILITY",
              "AFFECTIVE_COMPUTING",
              "AUGMENTED_REALITY",
              "CONVERSATIONAL_USER_INTERFACES",
              "GAMIFICATION",
              "GESTURE_CONTROL_DEVICES",
              "HUMAN_AUGMENTATION",
              "VIRTUAL_PERSONAL_ASSISTANTS",
              "VIRTUAL_REALITY",
              "VOLUMETRIC_DISPLAYS",
              "E_LEARNING",
              "DIGITAL_TWIN",
              "VEHICLE_STYLING",
              "V2V",
              "V2X",
              "IOT",
              "GERONTECHNOLOGY",
              "FALL_DETECTION",
              "SMART_HOME",
              "LIVING_COMMUNITIES",
              "END_OF_LIFE_PLANNING",
              "MOBILITY_AIDS",
              "TELEHEALTH",
              "ELDER_PLATFORMS",
              "5G_NETWORKS",
              "GEOLOCATION",
              "GEOLOCATION_INDOOR_AND_OUTDOOR_POSITIONING_AND_DIGITAL_MAPPING",
              "SMART_ANTENNAS",
              "TABLETS_AND_SMARTPHONES_APPS",
              "WIRELESS_SENSOR_NETWORKS",
              "HMI_AND_INFOTAINMENT",
              "IOT_POINT_SOLUTIONS",
              "IOT_PLATFORMS",
              "BLUETOOTH_5_0",
              "WIRELESS_TECHNOLOGIES",
              "NEAR_FIELD_TECHNOLOGY",
              "LIFI",
              "802_11AXSDX",
              "GLASSES",
              "JEWELRY",
              "SMART_BANDS",
              "SMART_CLOTHES",
              "SMART_HEADGEAR",
              "WATCHES",
              "NEW_THERAPIES_FOR_CHRONIC_DISEASES",
              "PERSONALIZED_MEDICINE",
              "PLATFORMS_FOR_HEALTH",
              "REGENERATIVE_MEDICINE",
              "TELEHEALTH",
              "COGNITIVE_CARE",
              "SENSORY_AIDS",
              "FEMTECH",
              "MENTAL_HEALTH",
              "CNS",
              "INFECTIOUS_DISEASE",
              "BIO_ROBOTICS",
              "BIOMEDICAL_IMAGING",
              "BIONICS",
              "DENTAL_TECHNOLOGIES",
              "VITAL_SIGNS_TRACKING",
              "PERSONAL_EMERGENCY_RESPONSE",
              "MEDICATION_MANAGEMENT",
              "DIAGNOSTIC",
              "ORTHOPEDIC_IMPLANT",
              "BIOPHARMACEUTICALS_AND_VACCINE_ENGINEERING",
              "DRUG_DEVELOPMENT",
              "PHARMA_NANOTECHNOLOGY",
              "PHARMACEUTICAL_TOXICITY",
              "BIOMEDICAL_COMPUTING_AND_BIOINFORMATICS",
              "GENE_AND_CELL_THERAPY",
              "MICROBIOLOGY_TECHNOLOGIES",
              "NANOBIOENGINEER",
              "NANOBIOMATERIALS",
              "OMICS_TECHNOLOGIES",
              "SYNTHETIC_BIOLOGY",
              "BODY_ENGINEERING",
              "ARTIFICIAL_INTELLIGENCE_BASED_THERAPY_DESIGN",
              "DNA_CAGES",
              "EMBEDDED",
              "EMBEDDED_IMPLANTED_AND_DIGESTIBLE_SENSORS",
              "FLUID_BIOPSY",
              "IMAGE_GUIDED_TECHNOLOGIES",
              "IN_SILICO_TRIALS",
              "MEASURING_LAB_MARKERS_AT_HOME",
              "MONITORING_AND_PROVIDING_CARE",
              "MONOCLONAL_ANTIBODIES",
              "MULTI_FUNCTIONAL_RADIOLOGY",
              "PAIN_MANAGEMENT",
              "PRECISION_SURGERY",
              "PREVENTION_AND_DIAGNOSIS",
              "REAL_TIME_CANCER_DIAGNOSTICS",
              "SMALL_MOLECULES"
            ]
          },
          "quest_facet_industries": {
            "type": "string",
            "enum": [
              "AGRICULTURE_FORESTRY_AND_FISHING",
              "ARTS_AND_ENTERTAINMENT",
              "BIOTECHNOLOGY",
              "CHEMICALS",
              "COMPUTER_AND_ELECTRONICS",
              "CONSTRUCTION",
              "DEFENSE_AND_SECURITY",
              "DISTRIBUTION_AND_LOGISTICS",
              "EDUCATION",
              "ELECTRICAL_EQUIPMENT",
              "ELECTRICITY_AND_GAS",
              "FINTECH_FINANCIAL_AND_INSURANCE",
              "FOOD_AND_BEVERAGES",
              "HEALTH_CARE",
              "HEAVY_EQUIPMENT",
              "HOTEL",
              "INFORMATION_TECHNOLOGY",
              "INTERNET_OF_THINGS",
              "LEGAL_ACCOUNTING_ARCHITECTURE_AND_PROFESSIONAL_SERVICES",
              "MACHINERY_AND_EQUIPMENT"
            ]
          },
          "quest_facet_business_models": {
            "type": "string",
            "enum": [
              "TECHNOLOGY",
              "ECOMMERCE",
              "WEARABLES",
              "AGENCY",
              "MARKETING",
              "SERVICES",
              "SAAS",
              "CONSUMER_PRODUCTS",
              "OTHER"
            ]
          },
          "quest_facet_social_innovations": {
            "type": "string",
            "enum": [
              "NO_POVERTY",
              "ZERO_HUNGER",
              "GOOD_HEALTH_AND_WELLBEING",
              "QUALITY_EDUCATION",
              "GENDER_EQUALITY",
              "CLEAN_WATER_AND_SANITATION",
              "AFFORDABLE_AND_CLEAN_ENERGY",
              "DECENT_WORK_AND_ECONOMIC_GROWTH",
              "INDUSTRY_INNOVATION_AND_INFRASTRUCTURE",
              "REDUCED_INEQUALITIES",
              "SUSTAINABLE_CITIES_AND_COMMUNITIES",
              "RESPONSABLE_CONSUMPTION_AND_PRODUCTION",
              "CLIMATE_ACTION",
              "LIFE_BELOW_WATER",
              "LIFE_ON_LAND",
              "PEACE_AND_JUSTICE_STRONG_INSTITUTIONS",
              "PARTNERSHIP_FOR_THE_GOALS"
            ]
          },
          "quest_facet_deep_techs": {
            "type": "string",
            "enum": [
              "BIOACTIVE_MATERIALS",
              "BIOCOMPATIBLE_ALLOYS_AND_POLYMERS",
              "BIOMIMETICS",
              "BIOSENSING_MATERIALS",
              "DRUG_RELEASING_POLYMERS",
              "ADVANCED_METALS_AND_ALLOYS",
              "ELECTROACTIVE_POLYMERS",
              "FERROELECTRIC_MATERIALS",
              "FIRE_RESISTANT_MATERIALS",
              "FUNCTIONALCOATINGS_SURFACE_TREATMENTS",
              "MAGNETOSTRICTIVE_MATERIALS",
              "METAMATERIALS",
              "PIEZOELECTRIC_MATERIALS",
              "SHAPE_MEMORY_POLYMERS_AND_ALLOYS",
              "SUPERCONDUCTIVE_MATERIALS",
              "QUANTUM_DOTS",
              "MOLECULARY_IMPRINTED_POLYMERS",
              "CARBON_NANOTUBES",
              "DATA_STORAGE",
              "ELECTROCHEMICAL_COMPONENTS",
              "GRAPHENE",
              "NANOCELLULOSE",
              "NANOCOMPOSITES",
              "NANOPOROUS_MATERIALS",
              "NANOWIRES",
              "COMMERCIAL_UAVS",
              "CONDUCTIVE_POLYMERS",
              "DRONES",
              "MEMS",
              "MOLECULAR_TRANSISTORS",
              "ELECTRONIC_NANOTUBES",
              "SMART_DUST",
              "SMART_ROBOTS",
              "SMART_SENSORS_AND_MONITORING",
              "THIN_FILM_SOLAR_CELLS_OPV",
              "SOTS/SOFA",
              "TELEMATIC_AND_V2X",
              "PREDICTIVE_MAINTENANCE",
              "MANUFACTURING_EXECUTION_SYSTEM_(MES)",
              "SAFETY",
              "AUTONOMOUS_CAR",
              "AUTONOMOUS_DRIVING",
              "POWERTRAIN",
              "IOT_AND_IIOT_PLATFORMS",
              "KERFLESS_WAFER_TECHNOLOGY",
              "ADVANCED_AND_ENGINEERING_POLYMERS_TECHNICAL_THERMOPLASTIC",
              "ADVANCED_CERAMICS",
              "ADVANCED_COMPOSITES",
              "ADVANCED_METALLIC_FOAMS",
              "HIGH_PERFORMANCE_CONCRETE",
              "PLATFORM_CONSOLIDATION",
              "VAT_PHOTOPOLYMERISATION",
              "MATERIAL_JETTING",
              "BINDER_JETTING",
              "MATERIAL_EXTRUSION",
              "POWDER_BED_FUSION",
              "SHEET_LAMINATION",
              "DIRECTED_ENERGY_DEPOSITION",
              "ENERGY_EFFICIENCY_IN_BUILDINGS",
              "GREEN_MATERIALS",
              "INDOOR_AIR_QUALITY",
              "RESOURCE_EFFICIENCY_IN_BUILDING",
              "IRRIGATION",
              "VALUE_ADDED_RESOURCES_FROM_WATER",
              "WATER_FILTRATION",
              "WATER_HARVESTING",
              "WATER_INFRASTRUCTURE_AND_DISTRIBUTION",
              "WATER_RESOURCE_IDENTIFICATION",
              "PLASTIC_WASTE_TECHNOLOGIES",
              "BIOREACTOR_LANDFILL",
              "MECHANICAL_BIOLOGICAL_TREATMENT_OF_MUNICIPAL_SOLID_WASTE",
              "PLASMA_GASIFICATION",
              "WASTE_RECYCLING",
              "WASTE_CONVERSION_TECHNOLOGIES",
              "DESALINATION",
              "INDUSTRIAL_AND_PRODUCED_WATER_PROCESSES",
              "POINT_OF_USE_WATER_TREATMENT",
              "WASTE_WATER_TREATMENT",
              "WATER_DESINFECTION",
              "ELECTROLYSIS",
              "AGRICULTURAL_TECHNOLOGIES",
              "ANIMAL_HEALTH",
              "CROP_PROTECTION",
              "CULTIVATION_AND_POST_HARVEST",
              "FISHERIES_AND_AQUATIC_ECOSYSTEMS_TECHNOLOGIES",
              "FOOD_TECHNOLOGIES",
              "GREENHOUSE",
              "NEW_GENERATION_FERTILIZERS",
              "SEEDS_AND_PROPAGATION",
              "CARBON_CAPTURE_AND_STORAGE_CARBON_CAPTURE_USE_AND_STORAGE",
              "CATALYTIC_CONVERTER",
              "EMISSIONS_BIOLOGICAL_TREATMENT",
              "EMISSION_MONITORING",
              "SCRUBBING_SYSTEMS",
              "AIR_PURIFICATION_TECHNOLOGIES",
              "BIOMASS",
              "CONCENTRATED_SOLAR_POWER",
              "GEOTHERMAL",
              "HYDROGEN_FUEL_CELL",
              "MARINE_RENEWABLES",
              "OCEAN_AND_HYDROGEN",
              "SOLAR_ENERGY",
              "WIND",
              "KINETIC",
              "THERMAL_ENERGY",
              "WASTE_HEAT_RECOVERY",
              "EFFICIENT_HEATING_AND_COOLING",
              "HOME_AND_FACILITIES_ENERGY_MANAGEMENT",
              "INDUSTRIAL_ENERGY_MANAGEMENT",
              "LIGHTING",
              "SMART_APPLIANCES",
              "SSL",
              "LIGHT_EMITTING_DIODE",
              "ORGANIC_LIGHT_EMITTING_DIODE",
              "FUEL_CELLS",
              "LITHIUM_ION",
              "METAL_AIR",
              "REDOX_FLOW_BATTERIES",
              "SUPERCAPACITORS",
              "BATTERY_MANAGEMENT_SYSTEM",
              "ON_BOARD_FAST_CHARGING",
              "POWERTRAIN",
              "NANOWIRE_BATTERIES",
              "TENG_TRIBOELECTRIC_NANOGENERATOR",
              "GRAPHENE_BATTERIES",
              "FOAM_BATTERIES",
              "SODIUM_ION_BATTERIES",
              "LIQUID_FLOW_BATTERIES",
              "CARBON_ION_BATTERY",
              "ZINC_AIR_BATTERIES",
              "STRETCHABLE_BATTERIES",
              "SMART_CLOTHING_BATTERY",
              "SOUND_POWERED_CHARGING",
              "URINE_POWERED_BATTERIES",
              "ALUMINIUM_AIR_BATTERY",
              "FLASH_BATTERIES",
              "ITES",
              "GEOMECHANICAL_PUMPED_STORAGE",
              "KINETIC_ENERGY_STORAGE",
              "VANADIUM_FLOW_BATTERY",
              "CHARGING_INFRASTRUCTURE",
              "MANAGEMENT",
              "MANAGEMENT_MEASURING_AND_CONTROL",
              "MICROGRIDS",
              "SMART_METERS",
              "OVER_THE_AIR_CHARGING",
              "BIO_HEATING",
              "BIODIESEL_ADVANCED",
              "CO_GENERATION",
              "MICROBIOME",
              "BRAIN_COMPUTER_INTERFACE",
              "COGNITIVE_EXPERT_ADVISORS",
              "DEEP_LEARNING",
              "EDGE_INTELLIGENCE",
              "ENTERPRISE_TAXONOMY_AND_ONTOLOGY_MANAGEMENT",
              "GENERAL_PURPOSE_MACHINE_INTELLIGENCE",
              "HUMAN_COMPUTER_INTERACTION",
              "MACHINE_LEARNING",
              "NATURAL_LANGUAGE_QUESTION_ANSWERING",
              "NEURAL_NETWORKS_AND_SEMANTIC_SEARCH_ENGINES",
              "QUANTUM_COMPUTING",
              "SENTIMENTAL_ANALYSIS",
              "CONVOLUTIONAL_NEURAL_NETWORK",
              "COMPUTER_VISION",
              "BYOD_AND_BORDERLESS_APPS",
              "CLOUD_COMPUTING",
              "CONTEXT_BROKERING",
              "DATA_ANALYTICS",
              "DATA_BROKER_PAAS",
              "MICRO_DATA_CENTERS",
              "PERSONAL_ANALYTICS",
              "SMART_DATA_DISCOVERY",
              "SOFTWARE_DEFINED_ANYTHING",
              "ASSET_MANAGEMENT",
              "AUGMENTED_WRITING",
              "PUBLIC_BLOCKCHAIN",
              "PRIVATE_BLOCKCHAIN",
              "CONSORTIUM_BLOCKCHAIN",
              "ANTIFRAUD_AND_IDENTITY_MANAGEMENT",
              "AUTOMATED_SECURITY",
              "BEHAVIORAL_ANALYTICS_AND_ANOMALY_DETECTION",
              "CREDENTIAL_MANAGEMENT",
              "CYBER_RISK_MANAGEMENT",
              "DECEPTION_SECURITY",
              "DEVICE_AUTHENTICATION",
              "IDENTITY_AS_A_SERVICE",
              "PREDICTIVE_INTELLIGENCE",
              "QUANTUM_ENCRYPTION",
              "THREAT_INTELLIGENCE",
              "FOTA",
              "MOBILITY",
              "AFFECTIVE_COMPUTING",
              "AUGMENTED_REALITY",
              "CONVERSATIONAL_USER_INTERFACES",
              "GAMIFICATION",
              "GESTURE_CONTROL_DEVICES",
              "HUMAN_AUGMENTATION",
              "VIRTUAL_PERSONAL_ASSISTANTS",
              "VIRTUAL_REALITY",
              "VOLUMETRIC_DISPLAYS",
              "E_LEARNING",
              "DIGITAL_TWIN",
              "VEHICLE_STYLING",
              "V2V",
              "V2X",
              "IOT",
              "GERONTECHNOLOGY",
              "FALL_DETECTION",
              "SMART_HOME",
              "LIVING_COMMUNITIES",
              "END_OF_LIFE_PLANNING",
              "MOBILITY_AIDS",
              "TELEHEALTH",
              "ELDER_PLATFORMS",
              "5G_NETWORKS",
              "GEOLOCATION",
              "GEOLOCATION_INDOOR_AND_OUTDOOR_POSITIONING_AND_DIGITAL_MAPPING",
              "SMART_ANTENNAS",
              "TABLETS_AND_SMARTPHONES_APPS",
              "WIRELESS_SENSOR_NETWORKS",
              "HMI_AND_INFOTAINMENT",
              "IOT_POINT_SOLUTIONS",
              "IOT_PLATFORMS",
              "BLUETOOTH_5_0",
              "WIRELESS_TECHNOLOGIES",
              "NEAR_FIELD_TECHNOLOGY",
              "LIFI",
              "802_11AXSDX",
              "GLASSES",
              "JEWELRY",
              "SMART_BANDS",
              "SMART_CLOTHES",
              "SMART_HEADGEAR",
              "WATCHES",
              "NEW_THERAPIES_FOR_CHRONIC_DISEASES",
              "PERSONALIZED_MEDICINE",
              "PLATFORMS_FOR_HEALTH",
              "REGENERATIVE_MEDICINE",
              "TELEHEALTH",
              "COGNITIVE_CARE",
              "SENSORY_AIDS",
              "FEMTECH",
              "MENTAL_HEALTH",
              "CNS",
              "INFECTIOUS_DISEASE",
              "BIO_ROBOTICS",
              "BIOMEDICAL_IMAGING",
              "BIONICS",
              "DENTAL_TECHNOLOGIES",
              "VITAL_SIGNS_TRACKING",
              "PERSONAL_EMERGENCY_RESPONSE",
              "MEDICATION_MANAGEMENT",
              "DIAGNOSTIC",
              "ORTHOPEDIC_IMPLANT",
              "BIOPHARMACEUTICALS_AND_VACCINE_ENGINEERING",
              "DRUG_DEVELOPMENT",
              "PHARMA_NANOTECHNOLOGY",
              "PHARMACEUTICAL_TOXICITY",
              "BIOMEDICAL_COMPUTING_AND_BIOINFORMATICS",
              "GENE_AND_CELL_THERAPY",
              "MICROBIOLOGY_TECHNOLOGIES",
              "NANOBIOENGINEER",
              "NANOBIOMATERIALS",
              "OMICS_TECHNOLOGIES",
              "SYNTHETIC_BIOLOGY",
              "BODY_ENGINEERING",
              "ARTIFICIAL_INTELLIGENCE_BASED_THERAPY_DESIGN",
              "DNA_CAGES",
              "EMBEDDED",
              "EMBEDDED_IMPLANTED_AND_DIGESTIBLE_SENSORS",
              "FLUID_BIOPSY",
              "IMAGE_GUIDED_TECHNOLOGIES",
              "IN_SILICO_TRIALS",
              "MEASURING_LAB_MARKERS_AT_HOME",
              "MONITORING_AND_PROVIDING_CARE",
              "MONOCLONAL_ANTIBODIES",
              "MULTI_FUNCTIONAL_RADIOLOGY",
              "PAIN_MANAGEMENT",
              "PRECISION_SURGERY",
              "PREVENTION_AND_DIAGNOSIS",
              "REAL_TIME_CANCER_DIAGNOSTICS",
              "SMALL_MOLECULES"
            ]
          },
          "investment_stage": {
            "type": "string",
            "enum": [
              "GOT_DECK",
              "BUSINESS_PLAN",
              "FIRST_PROTOTYPE",
              "INITIAL_INTEREST",
              "GOT_BETA",
              "VIRALITY_SCALABILITY",
              "FIXED_BETA",
              "STARTED_INVOICE",
              "RUNNING_BUSINESS"
            ]
          },
          "investment_stage_investments": {
            "type": "string",
            "example": "Series C"
          },
          "investment_number_past_exist": {
            "type": "number",
            "example": 1
          },
          "investment_trl_stage": {
            "type": "string",
            "enum": [
              "BASIC_PRINCIPLES_OBSERVED",
              "TECHNOLOGY_CONCEPT_FORMULATED",
              "EXPERIMENTAL_PROOF_OF_CONCEPT",
              "TECHNOLOGY_VALIDATED_IN_LAB",
              "TECHNOLOGY_VALIDATED_IN_RELEVANT_ENVIRONMENT",
              "TECHNOLOGY_DEMONSTRATED_IN_RELEVANT_ENVIRONMENT",
              "SYSTEM_PROTOTYPE_DEMONSTRATION_IN_OPERATIONAL_ENVIRONMENT",
              "SYSTEM_COMPLETE_AND_QUALIFIED",
              "ACTUAL_SYSTEM_PROVEN_IN_OPERATIONAL_ENVIRONMENT"
            ]
          },
          "investment_number_current_investments": {
            "type": "number",
            "example": 29
          },
          "investment_countries_interes": {
            "type": "string",
            "format": "ISO 3166-1 separated by comma",
            "example": "ES,DE,FR"
          },
          "financial_stage": {
            "type": "string",
            "enum": [
              "GOT_DECK",
              "BUSINESS_PLAN",
              "FIRST_PROTOTYPE",
              "INITIAL_INTEREST",
              "GOT_BETA",
              "VIRALITY_SCALABILITY",
              "FIXED_BETA",
              "STARTED_INVOICE",
              "RUNNING_BUSINESS"
            ]
          },
          "financial_seeked_capital": {
            "type": "number",
            "example": 10000
          },
          "financial_trl_stage": {
            "type": "string",
            "enum": [
              "BASIC_PRINCIPLES_OBSERVED",
              "TECHNOLOGY_CONCEPT_FORMULATED",
              "EXPERIMENTAL_PROOF_OF_CONCEPT",
              "TECHNOLOGY_VALIDATED_IN_LAB",
              "TECHNOLOGY_VALIDATED_IN_RELEVANT_ENVIRONMENT",
              "TECHNOLOGY_DEMONSTRATED_IN_RELEVANT_ENVIRONMENT",
              "SYSTEM_PROTOTYPE_DEMONSTRATION_IN_OPERATIONAL_ENVIRONMENT",
              "SYSTEM_COMPLETE_AND_QUALIFIED",
              "ACTUAL_SYSTEM_PROVEN_IN_OPERATIONAL_ENVIRONMENT"
            ]
          },
          "financial_raised_capital": {
            "type": "number",
            "example": 20000
          },
          "financial_total_funding": {
            "type": "number",
            "example": 40000
          },
          "financial_premoney_valuation": {
            "type": "number",
            "example": 100000
          },
          "financial_funding_stage": {
            "type": "string",
            "enum": [
              "PRE_SEED",
              "SEED",
              "GROWTH_CAPITAL",
              "SERIES_A",
              "SERIES_B",
              "SERIES_C",
              "SERIES_D_E_F",
              "GRANT"
            ]
          },
          "financial_last_funding": {
            "type": "string",
            "format": "Date with the following format YYYY-MM-DD",
            "example": "2021-10-15T00:00:00.000Z"
          },
          "financial_numbers_employees": {
            "type": "number",
            "example": 9
          },
          "financial_currency": {
            "type": "string",
            "enum": [
              "USD",
              "EUR"
            ]
          },
          "size": {
            "type": "string",
            "enum": [
              "SMALL",
              "MEDIUM",
              "LARGE"
            ]
          },
          "university_type": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "PUBLIC"
            ]
          },
          "person_investor_type": {
            "type": "string",
            "enum": [
              "BUSINESS_ANGEL",
              "FAMILY_AND_FRIEND",
              "OTHER"
            ]
          },
          "organization_investor_type": {
            "type": "string",
            "enum": [
              "VENTURE_CAPITAL",
              "CORPORATE_VENTURE_CAPITAL",
              "ANGEL_GROUP",
              "FAMILY_OFFICE",
              "ACCELERATOR_PROGRAM",
              "INVESTMENT_BANK",
              "GRANT_PUBLIC_FINANCING",
              "PENSION_FUNDS",
              "OTHER"
            ]
          }
        }
      },
      "OnlineEventEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Online event is empty."
          },
          "code": {
            "type": "string",
            "example": "ONLINE_EVENT_EMPTY"
          }
        }
      },
      "OnlineEventForbiddenError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The online event you are trying to access is not created by you."
          },
          "code": {
            "type": "string",
            "example": "ONLINE_EVENT_FORBIDDEN"
          }
        }
      },
      "FaceToFaceEventEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Face to face event is empty."
          },
          "code": {
            "type": "string",
            "example": "FACE_TO_FACE_EVENT_EMPTY"
          }
        }
      },
      "FaceToFaceEventForbiddenError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The face to face event you are trying to access is not created by you."
          },
          "code": {
            "type": "string",
            "example": "FACE_TO_FACE_EVENT_FORBIDDEN"
          }
        }
      },
      "DirectChatEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The direct chat object is empty."
          },
          "code": {
            "type": "string",
            "example": "DIRECT_CHAT_EMPTY"
          }
        }
      },
      "DirectChatInvalidIdError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid direct chat ID."
          },
          "code": {
            "type": "string",
            "example": "DIRECT_CHAT_INVALID_ID"
          }
        }
      },
      "FollowUpRoomEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The follow-up room object is empty."
          },
          "code": {
            "type": "string",
            "example": "FOLLOW_UP_ROOM_EMPTY"
          }
        }
      },
      "PublicChannelEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Public channel is empty."
          },
          "code": {
            "type": "string",
            "example": "PUBLIC_CHANNEL_EMPTY"
          }
        }
      },
      "OnlineEventEmptySuscriptionError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Online event subscription is empty."
          },
          "code": {
            "type": "string",
            "example": "ONLINE_EVENT_SUBSCRIPTION_EMPTY"
          }
        }
      },
      "FaceToFaceEventEmptySuscriptionError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Face to face subscription is empty."
          },
          "code": {
            "type": "string",
            "example": "FACE_TO_FACE_EVENT_SUBSCRIPTION_EMPTY"
          }
        }
      },
      "FollowUpRoomAddMemberEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The follow-up room add member object is empty."
          },
          "code": {
            "type": "string",
            "example": "FOLLOW_UP_ROOM_ADD_MEMBER_EMPTY"
          }
        }
      },
      "FollowUpRoomRemoveMemberEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The follow-up room leave member object is empty."
          },
          "code": {
            "type": "string",
            "example": "FOLLOW_UP_ROOM_LEAVE_MEMBER_EMPTY"
          }
        }
      },
      "FollowUpRoomOpenEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The follow-up room open event object is empty."
          },
          "code": {
            "type": "string",
            "example": "FOLLOW_UP_ROOM_OPEN_EVENT_EMPTY"
          }
        }
      },
      "FollowUpRoomCloseEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The follow-up room close event object is empty."
          },
          "code": {
            "type": "string",
            "example": "FOLLOW_UP_ROOM_CLOSE_EVENT_EMPTY"
          }
        }
      },
      "AddMessageForbiddenError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The message you are trying to delete is not owned by you."
          },
          "code": {
            "type": "string",
            "example": "DELETE_MESSAGE_NOT_ALLOWED"
          }
        }
      },
      "AddMessageEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The message object is empty."
          },
          "code": {
            "type": "string",
            "example": "ADD_MESSAGE_EMPTY"
          }
        }
      },
      "WallPostEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Wall post is empty."
          },
          "code": {
            "type": "string",
            "example": "WALL_POST_EMPTY"
          }
        }
      },
      "WallPostForbiddenError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Wall post is empty."
          },
          "code": {
            "type": "string",
            "example": "WALL_POST_EMPTY"
          }
        }
      },
      "ActorEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The actor object is empty."
          },
          "code": {
            "type": "string",
            "example": "ACTOR_EMPTY"
          }
        }
      },
      "MemberEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The member object is empty."
          },
          "code": {
            "type": "string",
            "example": "MEMBER_EMPTY"
          }
        }
      },
      "MemberEducationEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The education is empty."
          },
          "code": {
            "type": "string",
            "example": "MEMBER_EDUCATION_EMPTY"
          }
        }
      },
      "MemberExperienceEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The experience is empty."
          },
          "code": {
            "type": "string",
            "example": "MEMBER_EXPERIENCE_EMPTY"
          }
        }
      },
      "ProjectEmptyBodyError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The project object is empty."
          },
          "code": {
            "type": "string",
            "example": "PROJECT_EMPTY"
          }
        }
      },
      "WallPostInvalidIdError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid wall post ID."
          },
          "code": {
            "type": "string",
            "example": "WALL_POST_INVALID_ID"
          }
        }
      },
      "MemberInvalidIdError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid member ID."
          },
          "code": {
            "type": "string",
            "example": "MEMBER_INVALID_ID"
          }
        }
      },
      "MemberInvalidStateError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The member is not accept. Please, contact with the ecosystem manager."
          },
          "code": {
            "type": "string",
            "example": "MEMBER_INVALID_STATE"
          }
        }
      },
      "PublicChannelEventEmptySuscriptionError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The public channel unsubscribe event is empty."
          },
          "code": {
            "type": "string",
            "example": "PUBLIC_CHANNEL_UNSUBSCRIBE_EVENT_EMPTY"
          }
        }
      },
      "PublicChannelForbiddenError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The public channel you are trying to access is not created by you."
          },
          "code": {
            "type": "string",
            "example": "PUBLIC_CHANNEL_FORBIDDEN"
          }
        }
      },
      "PublicChannelEventEmptyUnsuscriptionError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The public channel unsubscribe event is empty."
          },
          "code": {
            "type": "string",
            "example": "PUBLIC_CHANNEL_UNSUBSCRIBE_EVENT_EMPTY"
          }
        }
      },
      "DirectChatCreateEvent": {
        "required": [
          "participants",
          "actions"
        ],
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantAnyEvent"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAction"
            }
          },
          "meetStarted": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "ParticipantAnyEvent": {
        "required": [
          "memberId",
          "state"
        ],
        "properties": {
          "memberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "state": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        }
      },
      "FollowUpRoomCreateEvent": {
        "required": [
          "title",
          "description"
        ],
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantAnyEvent"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAction"
            }
          },
          "title": {
            "type": "string",
            "example": "Follow up room example"
          },
          "description": {
            "type": "string",
            "example": "We want to test the operation of the room"
          },
          "state": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          },
          "meetStarted": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "FollowUpRoomUpdateEvent": {
        "required": [
          "id",
          "title",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantAnyEvent"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAction"
            }
          },
          "title": {
            "type": "string",
            "example": "Follow up room example"
          },
          "description": {
            "type": "string",
            "example": "We want to test the operation of the room"
          },
          "meetStarted": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "FollowUpRoomAddMemberEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "memberIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongo-id",
              "example": "60acae8e2f799d228a4d4a85"
            }
          }
        }
      },
      "FollowUpRoomRemoveMemberEvent": {
        "required": [
          "id",
          "newOwnerMemberId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "leaveMemberIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongo-id",
              "example": "60acae8e2f799d228a4d4a85"
            }
          },
          "newOwnerMemberId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "FollowUpRoomOpenEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "FollowUpRoomCloseEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          }
        }
      },
      "MessageAddEvent": {
        "required": [
          "roomId",
          "content"
        ],
        "properties": {
          "roomId": {
            "type": "string",
            "format": "mongo-id",
            "example": "60acae8e2f799d228a4d4a85"
          },
          "content": {
            "type": "string",
            "example": "Hello world"
          },
          "type": {
            "type": "string",
            "enum": [
              "MEMBER_MESSAGE",
              "MEET_START",
              "MEET_END"
            ]
          },
          "module": {
            "type": "string",
            "example": "community"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageDocumentAddEvent"
            }
          }
        }
      },
      "MessageDocumentAddEvent": {
        "required": [
          "link",
          "category",
          "filename"
        ],
        "properties": {
          "link": {
            "type": "string",
            "example": "https://docs.google.com/viewerng/vi54473784a6a2.xlsx"
          },
          "category": {
            "type": "string",
            "enum": [
              "PDF",
              "WORD",
              "IMAGE",
              "VIDEO",
              "OTHER"
            ]
          },
          "filename": {
            "type": "string",
            "example": "document1"
          }
        }
      },
      "SecurityAccessUnauthorizedError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Unauthorized."
          },
          "code": {
            "type": "string",
            "example": "SECURITY_ACCESS_UNAUTHORIZED"
          }
        }
      },
      "SecurityAccessForbiddenError": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Forbidden."
          },
          "code": {
            "type": "string",
            "example": "SECURITY_ACCESS_FORBIDDEN"
          }
        }
      }
    },
    "securitySchemes": {
      "idToken": {
        "type": "apiKey",
        "name": "COOKIE_ID_TOKEN",
        "in": "header"
      },
      "memberId": {
        "type": "apiKey",
        "name": "COOKIE_MEMBER_ID",
        "in": "header"
      },
      "userEmail": {
        "type": "apiKey",
        "name": "COOKIE_USER_EMAIL",
        "in": "header"
      },
      "onlineEventCreate": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "ONLINE_EVENT_CREATE": "Permission required to create an online event"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "onlineEventAnyUpdate": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "ONLINE_EVENT_ANY_UPDATE": "Permission required to update any online event"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "onlineEventAnyDelete": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "ONLINE_EVENT_ANY_DELETE": "Permission required to remove any online event"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "faceToFaceEventCreate": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "FACE_TO_FACE_EVENT_CREATE": "Permission required to create a face to face event"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "faceToFaceEventAnyUpdate": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "FACE_TO_FACE_EVENT_ANY_UPDATE": "Permission required to update any face to face event"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "faceToFaceEventAnyDelete": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "FACE_TO_FACE_EVENT_ANY_DELETE": "Permission required to remove any face to face event"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "directChatAnyList": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "DIRECT_CHAT_ANY_LIST": "Permission required to see all direct chats"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "followUpRoomAnyList": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "FOLLOW_UP_ROOM_ANY_LIST": "Permission required to see all direct chats"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "publicChannelCreate": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "PUBLIC_CHANNEL_CREATE": "Permission required to create a public channel"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "publicChannelAnyUpdate": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "PUBLIC_CHANNEL_ANY_UPDATE": "Permission required to update any public channel"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "publicChannelAnyDelete": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "PUBLIC_CHANNEL_ANY_DELETE": "Permission required to remove any public channel"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "wallPostCreate": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "WALL_POST_CREATE": "Permission required to create a wall post"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "wallPostAnyUpdate": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "WALL_POST_ANY_UPDATE": "Permission required to update any wall post"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "wallPostAnyDelete": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "WALL_POST_ANY_DELETE": "Permission required to remove any wall post"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      },
      "actorManagement": {
        "type": "oauth2",
        "description": "This define all permisions required in Core API",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "ACTOR_MANAGEMENT": "Permission required to accept or deny actors"
            },
            "authorizationUrl": "https://dev.moonshot.ceo/api/federation/login",
            "tokenUrl": "https://dev.moonshot.ceo/api/federation/token"
          }
        }
      }
    }
  }
}